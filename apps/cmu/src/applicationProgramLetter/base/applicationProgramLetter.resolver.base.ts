/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateApplicationProgramLetterArgs } from "./CreateApplicationProgramLetterArgs";
import { UpdateApplicationProgramLetterArgs } from "./UpdateApplicationProgramLetterArgs";
import { DeleteApplicationProgramLetterArgs } from "./DeleteApplicationProgramLetterArgs";
import { ApplicationProgramLetterCountArgs } from "./ApplicationProgramLetterCountArgs";
import { ApplicationProgramLetterFindManyArgs } from "./ApplicationProgramLetterFindManyArgs";
import { ApplicationProgramLetterFindUniqueArgs } from "./ApplicationProgramLetterFindUniqueArgs";
import { ApplicationProgramLetter } from "./ApplicationProgramLetter";
import { ApplicationProgramLetterService } from "../applicationProgramLetter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationProgramLetter)
export class ApplicationProgramLetterResolverBase {
  constructor(
    protected readonly service: ApplicationProgramLetterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "read",
    possession: "any",
  })
  async _applicationProgramLettersMeta(
    @graphql.Args() args: ApplicationProgramLetterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationProgramLetter])
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "read",
    possession: "any",
  })
  async applicationProgramLetters(
    @graphql.Args() args: ApplicationProgramLetterFindManyArgs
  ): Promise<ApplicationProgramLetter[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationProgramLetter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "read",
    possession: "own",
  })
  async applicationProgramLetter(
    @graphql.Args() args: ApplicationProgramLetterFindUniqueArgs
  ): Promise<ApplicationProgramLetter | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationProgramLetter)
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "create",
    possession: "any",
  })
  async createApplicationProgramLetter(
    @graphql.Args() args: CreateApplicationProgramLetterArgs
  ): Promise<ApplicationProgramLetter> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationProgramLetter)
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "update",
    possession: "any",
  })
  async updateApplicationProgramLetter(
    @graphql.Args() args: UpdateApplicationProgramLetterArgs
  ): Promise<ApplicationProgramLetter | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationProgramLetter)
  @nestAccessControl.UseRoles({
    resource: "ApplicationProgramLetter",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationProgramLetter(
    @graphql.Args() args: DeleteApplicationProgramLetterArgs
  ): Promise<ApplicationProgramLetter | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
