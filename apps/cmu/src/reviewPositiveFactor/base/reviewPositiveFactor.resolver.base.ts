/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReviewPositiveFactorArgs } from "./CreateReviewPositiveFactorArgs";
import { UpdateReviewPositiveFactorArgs } from "./UpdateReviewPositiveFactorArgs";
import { DeleteReviewPositiveFactorArgs } from "./DeleteReviewPositiveFactorArgs";
import { ReviewPositiveFactorCountArgs } from "./ReviewPositiveFactorCountArgs";
import { ReviewPositiveFactorFindManyArgs } from "./ReviewPositiveFactorFindManyArgs";
import { ReviewPositiveFactorFindUniqueArgs } from "./ReviewPositiveFactorFindUniqueArgs";
import { ReviewPositiveFactor } from "./ReviewPositiveFactor";
import { ReviewPositiveFactorService } from "../reviewPositiveFactor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewPositiveFactor)
export class ReviewPositiveFactorResolverBase {
  constructor(
    protected readonly service: ReviewPositiveFactorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "read",
    possession: "any",
  })
  async _reviewPositiveFactorsMeta(
    @graphql.Args() args: ReviewPositiveFactorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewPositiveFactor])
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "read",
    possession: "any",
  })
  async reviewPositiveFactors(
    @graphql.Args() args: ReviewPositiveFactorFindManyArgs
  ): Promise<ReviewPositiveFactor[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewPositiveFactor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "read",
    possession: "own",
  })
  async reviewPositiveFactor(
    @graphql.Args() args: ReviewPositiveFactorFindUniqueArgs
  ): Promise<ReviewPositiveFactor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewPositiveFactor)
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "create",
    possession: "any",
  })
  async createReviewPositiveFactor(
    @graphql.Args() args: CreateReviewPositiveFactorArgs
  ): Promise<ReviewPositiveFactor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewPositiveFactor)
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "update",
    possession: "any",
  })
  async updateReviewPositiveFactor(
    @graphql.Args() args: UpdateReviewPositiveFactorArgs
  ): Promise<ReviewPositiveFactor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewPositiveFactor)
  @nestAccessControl.UseRoles({
    resource: "ReviewPositiveFactor",
    action: "delete",
    possession: "any",
  })
  async deleteReviewPositiveFactor(
    @graphql.Args() args: DeleteReviewPositiveFactorArgs
  ): Promise<ReviewPositiveFactor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
