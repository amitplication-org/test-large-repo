/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLuApplicationProgramArgs } from "./CreateLuApplicationProgramArgs";
import { UpdateLuApplicationProgramArgs } from "./UpdateLuApplicationProgramArgs";
import { DeleteLuApplicationProgramArgs } from "./DeleteLuApplicationProgramArgs";
import { LuApplicationProgramCountArgs } from "./LuApplicationProgramCountArgs";
import { LuApplicationProgramFindManyArgs } from "./LuApplicationProgramFindManyArgs";
import { LuApplicationProgramFindUniqueArgs } from "./LuApplicationProgramFindUniqueArgs";
import { LuApplicationProgram } from "./LuApplicationProgram";
import { Application } from "../../application/base/Application";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { LuApplicationProgramService } from "../luApplicationProgram.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LuApplicationProgram)
export class LuApplicationProgramResolverBase {
  constructor(
    protected readonly service: LuApplicationProgramService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "any",
  })
  async _luApplicationProgramsMeta(
    @graphql.Args() args: LuApplicationProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LuApplicationProgram])
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "any",
  })
  async luApplicationPrograms(
    @graphql.Args() args: LuApplicationProgramFindManyArgs
  ): Promise<LuApplicationProgram[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LuApplicationProgram, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "own",
  })
  async luApplicationProgram(
    @graphql.Args() args: LuApplicationProgramFindUniqueArgs
  ): Promise<LuApplicationProgram | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationProgram)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "create",
    possession: "any",
  })
  async createLuApplicationProgram(
    @graphql.Args() args: CreateLuApplicationProgramArgs
  ): Promise<LuApplicationProgram> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        programs: {
          connect: args.data.programs,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationProgram)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "update",
    possession: "any",
  })
  async updateLuApplicationProgram(
    @graphql.Args() args: UpdateLuApplicationProgramArgs
  ): Promise<LuApplicationProgram | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          programs: {
            connect: args.data.programs,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationProgram)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "delete",
    possession: "any",
  })
  async deleteLuApplicationProgram(
    @graphql.Args() args: DeleteLuApplicationProgramArgs
  ): Promise<LuApplicationProgram | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: LuApplicationProgram
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProgramModel, {
    nullable: true,
    name: "programs",
  })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "any",
  })
  async resolveFieldPrograms(
    @graphql.Parent() parent: LuApplicationProgram
  ): Promise<ProgramModel | null> {
    const result = await this.service.getPrograms(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
