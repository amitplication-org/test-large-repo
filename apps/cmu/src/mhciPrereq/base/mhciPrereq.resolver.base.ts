/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMhciPrereqArgs } from "./CreateMhciPrereqArgs";
import { UpdateMhciPrereqArgs } from "./UpdateMhciPrereqArgs";
import { DeleteMhciPrereqArgs } from "./DeleteMhciPrereqArgs";
import { MhciPrereqCountArgs } from "./MhciPrereqCountArgs";
import { MhciPrereqFindManyArgs } from "./MhciPrereqFindManyArgs";
import { MhciPrereqFindUniqueArgs } from "./MhciPrereqFindUniqueArgs";
import { MhciPrereq } from "./MhciPrereq";
import { MhciPrereqService } from "../mhciPrereq.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MhciPrereq)
export class MhciPrereqResolverBase {
  constructor(
    protected readonly service: MhciPrereqService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "read",
    possession: "any",
  })
  async _mhciPrereqsMeta(
    @graphql.Args() args: MhciPrereqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MhciPrereq])
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "read",
    possession: "any",
  })
  async mhciPrereqs(
    @graphql.Args() args: MhciPrereqFindManyArgs
  ): Promise<MhciPrereq[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MhciPrereq, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "read",
    possession: "own",
  })
  async mhciPrereq(
    @graphql.Args() args: MhciPrereqFindUniqueArgs
  ): Promise<MhciPrereq | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciPrereq)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "create",
    possession: "any",
  })
  async createMhciPrereq(
    @graphql.Args() args: CreateMhciPrereqArgs
  ): Promise<MhciPrereq> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciPrereq)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "update",
    possession: "any",
  })
  async updateMhciPrereq(
    @graphql.Args() args: UpdateMhciPrereqArgs
  ): Promise<MhciPrereq | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereq)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereq",
    action: "delete",
    possession: "any",
  })
  async deleteMhciPrereq(
    @graphql.Args() args: DeleteMhciPrereqArgs
  ): Promise<MhciPrereq | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
