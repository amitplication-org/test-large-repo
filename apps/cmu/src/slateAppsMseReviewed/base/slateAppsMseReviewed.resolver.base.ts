/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateAppsMseReviewedArgs } from "./CreateSlateAppsMseReviewedArgs";
import { UpdateSlateAppsMseReviewedArgs } from "./UpdateSlateAppsMseReviewedArgs";
import { DeleteSlateAppsMseReviewedArgs } from "./DeleteSlateAppsMseReviewedArgs";
import { SlateAppsMseReviewedCountArgs } from "./SlateAppsMseReviewedCountArgs";
import { SlateAppsMseReviewedFindManyArgs } from "./SlateAppsMseReviewedFindManyArgs";
import { SlateAppsMseReviewedFindUniqueArgs } from "./SlateAppsMseReviewedFindUniqueArgs";
import { SlateAppsMseReviewed } from "./SlateAppsMseReviewed";
import { SlateAppsMseReviewedService } from "../slateAppsMseReviewed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateAppsMseReviewed)
export class SlateAppsMseReviewedResolverBase {
  constructor(
    protected readonly service: SlateAppsMseReviewedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "read",
    possession: "any",
  })
  async _slateAppsMseReviewedsMeta(
    @graphql.Args() args: SlateAppsMseReviewedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateAppsMseReviewed])
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "read",
    possession: "any",
  })
  async slateAppsMseRevieweds(
    @graphql.Args() args: SlateAppsMseReviewedFindManyArgs
  ): Promise<SlateAppsMseReviewed[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateAppsMseReviewed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "read",
    possession: "own",
  })
  async slateAppsMseReviewed(
    @graphql.Args() args: SlateAppsMseReviewedFindUniqueArgs
  ): Promise<SlateAppsMseReviewed | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "create",
    possession: "any",
  })
  async createSlateAppsMseReviewed(
    @graphql.Args() args: CreateSlateAppsMseReviewedArgs
  ): Promise<SlateAppsMseReviewed> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "update",
    possession: "any",
  })
  async updateSlateAppsMseReviewed(
    @graphql.Args() args: UpdateSlateAppsMseReviewedArgs
  ): Promise<SlateAppsMseReviewed | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "SlateAppsMseReviewed",
    action: "delete",
    possession: "any",
  })
  async deleteSlateAppsMseReviewed(
    @graphql.Args() args: DeleteSlateAppsMseReviewedArgs
  ): Promise<SlateAppsMseReviewed | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
