/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProgramsApplicationreqArgs } from "./CreateProgramsApplicationreqArgs";
import { UpdateProgramsApplicationreqArgs } from "./UpdateProgramsApplicationreqArgs";
import { DeleteProgramsApplicationreqArgs } from "./DeleteProgramsApplicationreqArgs";
import { ProgramsApplicationreqCountArgs } from "./ProgramsApplicationreqCountArgs";
import { ProgramsApplicationreqFindManyArgs } from "./ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreqFindUniqueArgs } from "./ProgramsApplicationreqFindUniqueArgs";
import { ProgramsApplicationreq } from "./ProgramsApplicationreq";
import { Applicationreq } from "../../applicationreq/base/Applicationreq";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { ProgramsApplicationreqService } from "../programsApplicationreq.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProgramsApplicationreq)
export class ProgramsApplicationreqResolverBase {
  constructor(
    protected readonly service: ProgramsApplicationreqService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async _programsApplicationreqsMeta(
    @graphql.Args() args: ProgramsApplicationreqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProgramsApplicationreq])
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async programsApplicationreqs(
    @graphql.Args() args: ProgramsApplicationreqFindManyArgs
  ): Promise<ProgramsApplicationreq[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProgramsApplicationreq, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "read",
    possession: "own",
  })
  async programsApplicationreq(
    @graphql.Args() args: ProgramsApplicationreqFindUniqueArgs
  ): Promise<ProgramsApplicationreq | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "create",
    possession: "any",
  })
  async createProgramsApplicationreq(
    @graphql.Args() args: CreateProgramsApplicationreqArgs
  ): Promise<ProgramsApplicationreq> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        applicationreqs: {
          connect: args.data.applicationreqs,
        },

        programs: {
          connect: args.data.programs,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "update",
    possession: "any",
  })
  async updateProgramsApplicationreq(
    @graphql.Args() args: UpdateProgramsApplicationreqArgs
  ): Promise<ProgramsApplicationreq | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          applicationreqs: {
            connect: args.data.applicationreqs,
          },

          programs: {
            connect: args.data.programs,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "delete",
    possession: "any",
  })
  async deleteProgramsApplicationreq(
    @graphql.Args() args: DeleteProgramsApplicationreqArgs
  ): Promise<ProgramsApplicationreq | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Applicationreq, {
    nullable: true,
    name: "applicationreqs",
  })
  @nestAccessControl.UseRoles({
    resource: "Applicationreq",
    action: "read",
    possession: "any",
  })
  async resolveFieldApplicationreqs(
    @graphql.Parent() parent: ProgramsApplicationreq
  ): Promise<Applicationreq | null> {
    const result = await this.service.getApplicationreqs(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProgramModel, {
    nullable: true,
    name: "programs",
  })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "any",
  })
  async resolveFieldPrograms(
    @graphql.Parent() parent: ProgramsApplicationreq
  ): Promise<ProgramModel | null> {
    const result = await this.service.getPrograms(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
