/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAcoPalArgs } from "./CreateAcoPalArgs";
import { UpdateAcoPalArgs } from "./UpdateAcoPalArgs";
import { DeleteAcoPalArgs } from "./DeleteAcoPalArgs";
import { AcoPalCountArgs } from "./AcoPalCountArgs";
import { AcoPalFindManyArgs } from "./AcoPalFindManyArgs";
import { AcoPalFindUniqueArgs } from "./AcoPalFindUniqueArgs";
import { AcoPal } from "./AcoPal";
import { AcoPalService } from "../acoPal.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AcoPal)
export class AcoPalResolverBase {
  constructor(
    protected readonly service: AcoPalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "read",
    possession: "any",
  })
  async _acoPalsMeta(
    @graphql.Args() args: AcoPalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AcoPal])
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "read",
    possession: "any",
  })
  async acoPals(@graphql.Args() args: AcoPalFindManyArgs): Promise<AcoPal[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AcoPal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "read",
    possession: "own",
  })
  async acoPal(
    @graphql.Args() args: AcoPalFindUniqueArgs
  ): Promise<AcoPal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AcoPal)
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "create",
    possession: "any",
  })
  async createAcoPal(@graphql.Args() args: CreateAcoPalArgs): Promise<AcoPal> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AcoPal)
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "update",
    possession: "any",
  })
  async updateAcoPal(
    @graphql.Args() args: UpdateAcoPalArgs
  ): Promise<AcoPal | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AcoPal)
  @nestAccessControl.UseRoles({
    resource: "AcoPal",
    action: "delete",
    possession: "any",
  })
  async deleteAcoPal(
    @graphql.Args() args: DeleteAcoPalArgs
  ): Promise<AcoPal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
