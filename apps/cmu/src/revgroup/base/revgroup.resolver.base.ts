/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRevgroupArgs } from "./CreateRevgroupArgs";
import { UpdateRevgroupArgs } from "./UpdateRevgroupArgs";
import { DeleteRevgroupArgs } from "./DeleteRevgroupArgs";
import { RevgroupCountArgs } from "./RevgroupCountArgs";
import { RevgroupFindManyArgs } from "./RevgroupFindManyArgs";
import { RevgroupFindUniqueArgs } from "./RevgroupFindUniqueArgs";
import { Revgroup } from "./Revgroup";
import { RevgroupService } from "../revgroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Revgroup)
export class RevgroupResolverBase {
  constructor(
    protected readonly service: RevgroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "read",
    possession: "any",
  })
  async _revgroupsMeta(
    @graphql.Args() args: RevgroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Revgroup])
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "read",
    possession: "any",
  })
  async revgroups(
    @graphql.Args() args: RevgroupFindManyArgs
  ): Promise<Revgroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Revgroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "read",
    possession: "own",
  })
  async revgroup(
    @graphql.Args() args: RevgroupFindUniqueArgs
  ): Promise<Revgroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Revgroup)
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "create",
    possession: "any",
  })
  async createRevgroup(
    @graphql.Args() args: CreateRevgroupArgs
  ): Promise<Revgroup> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Revgroup)
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "update",
    possession: "any",
  })
  async updateRevgroup(
    @graphql.Args() args: UpdateRevgroupArgs
  ): Promise<Revgroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Revgroup)
  @nestAccessControl.UseRoles({
    resource: "Revgroup",
    action: "delete",
    possession: "any",
  })
  async deleteRevgroup(
    @graphql.Args() args: DeleteRevgroupArgs
  ): Promise<Revgroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
