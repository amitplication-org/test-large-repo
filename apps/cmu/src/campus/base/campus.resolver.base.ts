/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCampusArgs } from "./CreateCampusArgs";
import { UpdateCampusArgs } from "./UpdateCampusArgs";
import { DeleteCampusArgs } from "./DeleteCampusArgs";
import { CampusCountArgs } from "./CampusCountArgs";
import { CampusFindManyArgs } from "./CampusFindManyArgs";
import { CampusFindUniqueArgs } from "./CampusFindUniqueArgs";
import { Campus } from "./Campus";
import { CampusService } from "../campus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Campus)
export class CampusResolverBase {
  constructor(
    protected readonly service: CampusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "read",
    possession: "any",
  })
  async _campusesMeta(
    @graphql.Args() args: CampusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Campus])
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "read",
    possession: "any",
  })
  async campuses(@graphql.Args() args: CampusFindManyArgs): Promise<Campus[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Campus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "read",
    possession: "own",
  })
  async campus(
    @graphql.Args() args: CampusFindUniqueArgs
  ): Promise<Campus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Campus)
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "create",
    possession: "any",
  })
  async createCampus(@graphql.Args() args: CreateCampusArgs): Promise<Campus> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Campus)
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "update",
    possession: "any",
  })
  async updateCampus(
    @graphql.Args() args: UpdateCampusArgs
  ): Promise<Campus | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Campus)
  @nestAccessControl.UseRoles({
    resource: "Campus",
    action: "delete",
    possession: "any",
  })
  async deleteCampus(
    @graphql.Args() args: DeleteCampusArgs
  ): Promise<Campus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
