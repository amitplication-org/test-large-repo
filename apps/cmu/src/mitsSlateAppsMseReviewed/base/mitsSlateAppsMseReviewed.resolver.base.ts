/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMitsSlateAppsMseReviewedArgs } from "./CreateMitsSlateAppsMseReviewedArgs";
import { UpdateMitsSlateAppsMseReviewedArgs } from "./UpdateMitsSlateAppsMseReviewedArgs";
import { DeleteMitsSlateAppsMseReviewedArgs } from "./DeleteMitsSlateAppsMseReviewedArgs";
import { MitsSlateAppsMseReviewedCountArgs } from "./MitsSlateAppsMseReviewedCountArgs";
import { MitsSlateAppsMseReviewedFindManyArgs } from "./MitsSlateAppsMseReviewedFindManyArgs";
import { MitsSlateAppsMseReviewedFindUniqueArgs } from "./MitsSlateAppsMseReviewedFindUniqueArgs";
import { MitsSlateAppsMseReviewed } from "./MitsSlateAppsMseReviewed";
import { MitsSlateAppsMseReviewedService } from "../mitsSlateAppsMseReviewed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MitsSlateAppsMseReviewed)
export class MitsSlateAppsMseReviewedResolverBase {
  constructor(
    protected readonly service: MitsSlateAppsMseReviewedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "read",
    possession: "any",
  })
  async _mitsSlateAppsMseReviewedsMeta(
    @graphql.Args() args: MitsSlateAppsMseReviewedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MitsSlateAppsMseReviewed])
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "read",
    possession: "any",
  })
  async mitsSlateAppsMseRevieweds(
    @graphql.Args() args: MitsSlateAppsMseReviewedFindManyArgs
  ): Promise<MitsSlateAppsMseReviewed[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MitsSlateAppsMseReviewed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "read",
    possession: "own",
  })
  async mitsSlateAppsMseReviewed(
    @graphql.Args() args: MitsSlateAppsMseReviewedFindUniqueArgs
  ): Promise<MitsSlateAppsMseReviewed | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "create",
    possession: "any",
  })
  async createMitsSlateAppsMseReviewed(
    @graphql.Args() args: CreateMitsSlateAppsMseReviewedArgs
  ): Promise<MitsSlateAppsMseReviewed> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "update",
    possession: "any",
  })
  async updateMitsSlateAppsMseReviewed(
    @graphql.Args() args: UpdateMitsSlateAppsMseReviewedArgs
  ): Promise<MitsSlateAppsMseReviewed | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateAppsMseReviewed)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateAppsMseReviewed",
    action: "delete",
    possession: "any",
  })
  async deleteMitsSlateAppsMseReviewed(
    @graphql.Args() args: DeleteMitsSlateAppsMseReviewedArgs
  ): Promise<MitsSlateAppsMseReviewed | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
