/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFellowshipArgs } from "./CreateFellowshipArgs";
import { UpdateFellowshipArgs } from "./UpdateFellowshipArgs";
import { DeleteFellowshipArgs } from "./DeleteFellowshipArgs";
import { FellowshipCountArgs } from "./FellowshipCountArgs";
import { FellowshipFindManyArgs } from "./FellowshipFindManyArgs";
import { FellowshipFindUniqueArgs } from "./FellowshipFindUniqueArgs";
import { Fellowship } from "./Fellowship";
import { FellowshipService } from "../fellowship.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Fellowship)
export class FellowshipResolverBase {
  constructor(
    protected readonly service: FellowshipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "read",
    possession: "any",
  })
  async _fellowshipsMeta(
    @graphql.Args() args: FellowshipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fellowship])
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "read",
    possession: "any",
  })
  async fellowships(
    @graphql.Args() args: FellowshipFindManyArgs
  ): Promise<Fellowship[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fellowship, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "read",
    possession: "own",
  })
  async fellowship(
    @graphql.Args() args: FellowshipFindUniqueArgs
  ): Promise<Fellowship | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fellowship)
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "create",
    possession: "any",
  })
  async createFellowship(
    @graphql.Args() args: CreateFellowshipArgs
  ): Promise<Fellowship> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fellowship)
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "update",
    possession: "any",
  })
  async updateFellowship(
    @graphql.Args() args: UpdateFellowshipArgs
  ): Promise<Fellowship | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fellowship)
  @nestAccessControl.UseRoles({
    resource: "Fellowship",
    action: "delete",
    possession: "any",
  })
  async deleteFellowship(
    @graphql.Args() args: DeleteFellowshipArgs
  ): Promise<Fellowship | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
