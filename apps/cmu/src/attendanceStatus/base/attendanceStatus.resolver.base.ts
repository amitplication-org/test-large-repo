/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAttendanceStatusArgs } from "./CreateAttendanceStatusArgs";
import { UpdateAttendanceStatusArgs } from "./UpdateAttendanceStatusArgs";
import { DeleteAttendanceStatusArgs } from "./DeleteAttendanceStatusArgs";
import { AttendanceStatusCountArgs } from "./AttendanceStatusCountArgs";
import { AttendanceStatusFindManyArgs } from "./AttendanceStatusFindManyArgs";
import { AttendanceStatusFindUniqueArgs } from "./AttendanceStatusFindUniqueArgs";
import { AttendanceStatus } from "./AttendanceStatus";
import { AttendanceStatusService } from "../attendanceStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AttendanceStatus)
export class AttendanceStatusResolverBase {
  constructor(
    protected readonly service: AttendanceStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "read",
    possession: "any",
  })
  async _attendanceStatusesMeta(
    @graphql.Args() args: AttendanceStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AttendanceStatus])
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "read",
    possession: "any",
  })
  async attendanceStatuses(
    @graphql.Args() args: AttendanceStatusFindManyArgs
  ): Promise<AttendanceStatus[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AttendanceStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "read",
    possession: "own",
  })
  async attendanceStatus(
    @graphql.Args() args: AttendanceStatusFindUniqueArgs
  ): Promise<AttendanceStatus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttendanceStatus)
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "create",
    possession: "any",
  })
  async createAttendanceStatus(
    @graphql.Args() args: CreateAttendanceStatusArgs
  ): Promise<AttendanceStatus> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttendanceStatus)
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "update",
    possession: "any",
  })
  async updateAttendanceStatus(
    @graphql.Args() args: UpdateAttendanceStatusArgs
  ): Promise<AttendanceStatus | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttendanceStatus)
  @nestAccessControl.UseRoles({
    resource: "AttendanceStatus",
    action: "delete",
    possession: "any",
  })
  async deleteAttendanceStatus(
    @graphql.Args() args: DeleteAttendanceStatusArgs
  ): Promise<AttendanceStatus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
