/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUsertypeArgs } from "./CreateUsertypeArgs";
import { UpdateUsertypeArgs } from "./UpdateUsertypeArgs";
import { DeleteUsertypeArgs } from "./DeleteUsertypeArgs";
import { UsertypeCountArgs } from "./UsertypeCountArgs";
import { UsertypeFindManyArgs } from "./UsertypeFindManyArgs";
import { UsertypeFindUniqueArgs } from "./UsertypeFindUniqueArgs";
import { Usertype } from "./Usertype";
import { UsertypeService } from "../usertype.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Usertype)
export class UsertypeResolverBase {
  constructor(
    protected readonly service: UsertypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "read",
    possession: "any",
  })
  async _usertypesMeta(
    @graphql.Args() args: UsertypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Usertype])
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "read",
    possession: "any",
  })
  async usertypes(
    @graphql.Args() args: UsertypeFindManyArgs
  ): Promise<Usertype[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Usertype, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "read",
    possession: "own",
  })
  async usertype(
    @graphql.Args() args: UsertypeFindUniqueArgs
  ): Promise<Usertype | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usertype)
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "create",
    possession: "any",
  })
  async createUsertype(
    @graphql.Args() args: CreateUsertypeArgs
  ): Promise<Usertype> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usertype)
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "update",
    possession: "any",
  })
  async updateUsertype(
    @graphql.Args() args: UpdateUsertypeArgs
  ): Promise<Usertype | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Usertype)
  @nestAccessControl.UseRoles({
    resource: "Usertype",
    action: "delete",
    possession: "any",
  })
  async deleteUsertype(
    @graphql.Args() args: DeleteUsertypeArgs
  ): Promise<Usertype | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
