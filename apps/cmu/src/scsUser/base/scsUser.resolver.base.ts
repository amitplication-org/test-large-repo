/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScsUserArgs } from "./CreateScsUserArgs";
import { UpdateScsUserArgs } from "./UpdateScsUserArgs";
import { DeleteScsUserArgs } from "./DeleteScsUserArgs";
import { ScsUserCountArgs } from "./ScsUserCountArgs";
import { ScsUserFindManyArgs } from "./ScsUserFindManyArgs";
import { ScsUserFindUniqueArgs } from "./ScsUserFindUniqueArgs";
import { ScsUser } from "./ScsUser";
import { ScsUserService } from "../scsUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScsUser)
export class ScsUserResolverBase {
  constructor(
    protected readonly service: ScsUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "read",
    possession: "any",
  })
  async _scsUsersMeta(
    @graphql.Args() args: ScsUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScsUser])
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "read",
    possession: "any",
  })
  async scsUsers(
    @graphql.Args() args: ScsUserFindManyArgs
  ): Promise<ScsUser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScsUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "read",
    possession: "own",
  })
  async scsUser(
    @graphql.Args() args: ScsUserFindUniqueArgs
  ): Promise<ScsUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScsUser)
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "create",
    possession: "any",
  })
  async createScsUser(
    @graphql.Args() args: CreateScsUserArgs
  ): Promise<ScsUser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScsUser)
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "update",
    possession: "any",
  })
  async updateScsUser(
    @graphql.Args() args: UpdateScsUserArgs
  ): Promise<ScsUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScsUser)
  @nestAccessControl.UseRoles({
    resource: "ScsUser",
    action: "delete",
    possession: "any",
  })
  async deleteScsUser(
    @graphql.Args() args: DeleteScsUserArgs
  ): Promise<ScsUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
