/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDepartmentReplyperiodArgs } from "./CreateDepartmentReplyperiodArgs";
import { UpdateDepartmentReplyperiodArgs } from "./UpdateDepartmentReplyperiodArgs";
import { DeleteDepartmentReplyperiodArgs } from "./DeleteDepartmentReplyperiodArgs";
import { DepartmentReplyperiodCountArgs } from "./DepartmentReplyperiodCountArgs";
import { DepartmentReplyperiodFindManyArgs } from "./DepartmentReplyperiodFindManyArgs";
import { DepartmentReplyperiodFindUniqueArgs } from "./DepartmentReplyperiodFindUniqueArgs";
import { DepartmentReplyperiod } from "./DepartmentReplyperiod";
import { DepartmentReplyperiodService } from "../departmentReplyperiod.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DepartmentReplyperiod)
export class DepartmentReplyperiodResolverBase {
  constructor(
    protected readonly service: DepartmentReplyperiodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "read",
    possession: "any",
  })
  async _departmentReplyperiodsMeta(
    @graphql.Args() args: DepartmentReplyperiodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DepartmentReplyperiod])
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "read",
    possession: "any",
  })
  async departmentReplyperiods(
    @graphql.Args() args: DepartmentReplyperiodFindManyArgs
  ): Promise<DepartmentReplyperiod[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DepartmentReplyperiod, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "read",
    possession: "own",
  })
  async departmentReplyperiod(
    @graphql.Args() args: DepartmentReplyperiodFindUniqueArgs
  ): Promise<DepartmentReplyperiod | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DepartmentReplyperiod)
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "create",
    possession: "any",
  })
  async createDepartmentReplyperiod(
    @graphql.Args() args: CreateDepartmentReplyperiodArgs
  ): Promise<DepartmentReplyperiod> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DepartmentReplyperiod)
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "update",
    possession: "any",
  })
  async updateDepartmentReplyperiod(
    @graphql.Args() args: UpdateDepartmentReplyperiodArgs
  ): Promise<DepartmentReplyperiod | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DepartmentReplyperiod)
  @nestAccessControl.UseRoles({
    resource: "DepartmentReplyperiod",
    action: "delete",
    possession: "any",
  })
  async deleteDepartmentReplyperiod(
    @graphql.Args() args: DeleteDepartmentReplyperiodArgs
  ): Promise<DepartmentReplyperiod | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
