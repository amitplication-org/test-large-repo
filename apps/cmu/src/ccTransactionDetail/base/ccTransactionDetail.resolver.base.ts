/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCcTransactionDetailArgs } from "./CreateCcTransactionDetailArgs";
import { UpdateCcTransactionDetailArgs } from "./UpdateCcTransactionDetailArgs";
import { DeleteCcTransactionDetailArgs } from "./DeleteCcTransactionDetailArgs";
import { CcTransactionDetailCountArgs } from "./CcTransactionDetailCountArgs";
import { CcTransactionDetailFindManyArgs } from "./CcTransactionDetailFindManyArgs";
import { CcTransactionDetailFindUniqueArgs } from "./CcTransactionDetailFindUniqueArgs";
import { CcTransactionDetail } from "./CcTransactionDetail";
import { CcTransactionDetailService } from "../ccTransactionDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CcTransactionDetail)
export class CcTransactionDetailResolverBase {
  constructor(
    protected readonly service: CcTransactionDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "read",
    possession: "any",
  })
  async _ccTransactionDetailsMeta(
    @graphql.Args() args: CcTransactionDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CcTransactionDetail])
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "read",
    possession: "any",
  })
  async ccTransactionDetails(
    @graphql.Args() args: CcTransactionDetailFindManyArgs
  ): Promise<CcTransactionDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CcTransactionDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "read",
    possession: "own",
  })
  async ccTransactionDetail(
    @graphql.Args() args: CcTransactionDetailFindUniqueArgs
  ): Promise<CcTransactionDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CcTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "create",
    possession: "any",
  })
  async createCcTransactionDetail(
    @graphql.Args() args: CreateCcTransactionDetailArgs
  ): Promise<CcTransactionDetail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CcTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "update",
    possession: "any",
  })
  async updateCcTransactionDetail(
    @graphql.Args() args: UpdateCcTransactionDetailArgs
  ): Promise<CcTransactionDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CcTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionDetail",
    action: "delete",
    possession: "any",
  })
  async deleteCcTransactionDetail(
    @graphql.Args() args: DeleteCcTransactionDetailArgs
  ): Promise<CcTransactionDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
