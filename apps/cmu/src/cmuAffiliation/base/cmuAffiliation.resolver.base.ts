/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCmuAffiliationArgs } from "./CreateCmuAffiliationArgs";
import { UpdateCmuAffiliationArgs } from "./UpdateCmuAffiliationArgs";
import { DeleteCmuAffiliationArgs } from "./DeleteCmuAffiliationArgs";
import { CmuAffiliationCountArgs } from "./CmuAffiliationCountArgs";
import { CmuAffiliationFindManyArgs } from "./CmuAffiliationFindManyArgs";
import { CmuAffiliationFindUniqueArgs } from "./CmuAffiliationFindUniqueArgs";
import { CmuAffiliation } from "./CmuAffiliation";
import { CmuAffiliationService } from "../cmuAffiliation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CmuAffiliation)
export class CmuAffiliationResolverBase {
  constructor(
    protected readonly service: CmuAffiliationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "read",
    possession: "any",
  })
  async _cmuAffiliationsMeta(
    @graphql.Args() args: CmuAffiliationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CmuAffiliation])
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "read",
    possession: "any",
  })
  async cmuAffiliations(
    @graphql.Args() args: CmuAffiliationFindManyArgs
  ): Promise<CmuAffiliation[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CmuAffiliation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "read",
    possession: "own",
  })
  async cmuAffiliation(
    @graphql.Args() args: CmuAffiliationFindUniqueArgs
  ): Promise<CmuAffiliation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CmuAffiliation)
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "create",
    possession: "any",
  })
  async createCmuAffiliation(
    @graphql.Args() args: CreateCmuAffiliationArgs
  ): Promise<CmuAffiliation> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CmuAffiliation)
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "update",
    possession: "any",
  })
  async updateCmuAffiliation(
    @graphql.Args() args: UpdateCmuAffiliationArgs
  ): Promise<CmuAffiliation | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CmuAffiliation)
  @nestAccessControl.UseRoles({
    resource: "CmuAffiliation",
    action: "delete",
    possession: "any",
  })
  async deleteCmuAffiliation(
    @graphql.Args() args: DeleteCmuAffiliationArgs
  ): Promise<CmuAffiliation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
