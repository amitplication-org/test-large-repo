/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccesslogService } from "../accesslog.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccesslogCreateInput } from "./AccesslogCreateInput";
import { AccesslogWhereInput } from "./AccesslogWhereInput";
import { AccesslogWhereUniqueInput } from "./AccesslogWhereUniqueInput";
import { AccesslogFindManyArgs } from "./AccesslogFindManyArgs";
import { AccesslogUpdateInput } from "./AccesslogUpdateInput";
import { Accesslog } from "./Accesslog";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccesslogControllerBase {
  constructor(
    protected readonly service: AccesslogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accesslog })
  @nestAccessControl.UseRoles({
    resource: "Accesslog",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: AccesslogCreateInput): Promise<Accesslog> {
    return await this.service.create({
      data: data,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        domain: true,
        eventtime: true,
        id: true,
        lastsrv: true,
        luUsersUsertypesId: true,
        ra: true,
        referer: true,
        sa: true,
        usersId: true,
        usertypeId: true,
        xforward: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Accesslog] })
  @ApiNestedQuery(AccesslogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Accesslog",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Accesslog[]> {
    const args = plainToClass(AccesslogFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        domain: true,
        eventtime: true,
        id: true,
        lastsrv: true,
        luUsersUsertypesId: true,
        ra: true,
        referer: true,
        sa: true,
        usersId: true,
        usertypeId: true,
        xforward: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accesslog",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: AccesslogWhereUniqueInput
  ): Promise<Accesslog | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        domain: true,
        eventtime: true,
        id: true,
        lastsrv: true,
        luUsersUsertypesId: true,
        ra: true,
        referer: true,
        sa: true,
        usersId: true,
        usertypeId: true,
        xforward: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accesslog",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: AccesslogWhereUniqueInput,
    @common.Body() data: AccesslogUpdateInput
  ): Promise<Accesslog | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          activity: true,
          applicationId: true,
          client: true,
          domain: true,
          eventtime: true,
          id: true,
          lastsrv: true,
          luUsersUsertypesId: true,
          ra: true,
          referer: true,
          sa: true,
          usersId: true,
          usertypeId: true,
          xforward: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accesslog",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: AccesslogWhereUniqueInput
  ): Promise<Accesslog | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          activity: true,
          applicationId: true,
          client: true,
          domain: true,
          eventtime: true,
          id: true,
          lastsrv: true,
          luUsersUsertypesId: true,
          ra: true,
          referer: true,
          sa: true,
          usersId: true,
          usertypeId: true,
          xforward: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
