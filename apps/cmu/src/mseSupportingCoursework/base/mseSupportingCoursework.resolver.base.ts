/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMseSupportingCourseworkArgs } from "./CreateMseSupportingCourseworkArgs";
import { UpdateMseSupportingCourseworkArgs } from "./UpdateMseSupportingCourseworkArgs";
import { DeleteMseSupportingCourseworkArgs } from "./DeleteMseSupportingCourseworkArgs";
import { MseSupportingCourseworkCountArgs } from "./MseSupportingCourseworkCountArgs";
import { MseSupportingCourseworkFindManyArgs } from "./MseSupportingCourseworkFindManyArgs";
import { MseSupportingCourseworkFindUniqueArgs } from "./MseSupportingCourseworkFindUniqueArgs";
import { MseSupportingCoursework } from "./MseSupportingCoursework";
import { MseSupportingCourseworkService } from "../mseSupportingCoursework.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MseSupportingCoursework)
export class MseSupportingCourseworkResolverBase {
  constructor(
    protected readonly service: MseSupportingCourseworkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "read",
    possession: "any",
  })
  async _mseSupportingCourseworksMeta(
    @graphql.Args() args: MseSupportingCourseworkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MseSupportingCoursework])
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "read",
    possession: "any",
  })
  async mseSupportingCourseworks(
    @graphql.Args() args: MseSupportingCourseworkFindManyArgs
  ): Promise<MseSupportingCoursework[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MseSupportingCoursework, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "read",
    possession: "own",
  })
  async mseSupportingCoursework(
    @graphql.Args() args: MseSupportingCourseworkFindUniqueArgs
  ): Promise<MseSupportingCoursework | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseSupportingCoursework)
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "create",
    possession: "any",
  })
  async createMseSupportingCoursework(
    @graphql.Args() args: CreateMseSupportingCourseworkArgs
  ): Promise<MseSupportingCoursework> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseSupportingCoursework)
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "update",
    possession: "any",
  })
  async updateMseSupportingCoursework(
    @graphql.Args() args: UpdateMseSupportingCourseworkArgs
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseSupportingCoursework)
  @nestAccessControl.UseRoles({
    resource: "MseSupportingCoursework",
    action: "delete",
    possession: "any",
  })
  async deleteMseSupportingCoursework(
    @graphql.Args() args: DeleteMseSupportingCourseworkArgs
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
