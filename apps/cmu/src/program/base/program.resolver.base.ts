/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProgramArgs } from "./CreateProgramArgs";
import { UpdateProgramArgs } from "./UpdateProgramArgs";
import { DeleteProgramArgs } from "./DeleteProgramArgs";
import { ProgramCountArgs } from "./ProgramCountArgs";
import { ProgramFindManyArgs } from "./ProgramFindManyArgs";
import { ProgramFindUniqueArgs } from "./ProgramFindUniqueArgs";
import { Program } from "./Program";
import { ProgramService } from "../program.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Program)
export class ProgramResolverBase {
  constructor(
    protected readonly service: ProgramService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "read",
    possession: "any",
  })
  async _programsMeta(
    @graphql.Args() args: ProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Program])
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "read",
    possession: "any",
  })
  async programs(
    @graphql.Args() args: ProgramFindManyArgs
  ): Promise<Program[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Program, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "read",
    possession: "own",
  })
  async program(
    @graphql.Args() args: ProgramFindUniqueArgs
  ): Promise<Program | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Program)
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "create",
    possession: "any",
  })
  async createProgram(
    @graphql.Args() args: CreateProgramArgs
  ): Promise<Program> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Program)
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "update",
    possession: "any",
  })
  async updateProgram(
    @graphql.Args() args: UpdateProgramArgs
  ): Promise<Program | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Program)
  @nestAccessControl.UseRoles({
    resource: "Program",
    action: "delete",
    possession: "any",
  })
  async deleteProgram(
    @graphql.Args() args: DeleteProgramArgs
  ): Promise<Program | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
