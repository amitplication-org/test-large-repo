/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateSuppinfoArgs } from "./CreateSlateSuppinfoArgs";
import { UpdateSlateSuppinfoArgs } from "./UpdateSlateSuppinfoArgs";
import { DeleteSlateSuppinfoArgs } from "./DeleteSlateSuppinfoArgs";
import { SlateSuppinfoCountArgs } from "./SlateSuppinfoCountArgs";
import { SlateSuppinfoFindManyArgs } from "./SlateSuppinfoFindManyArgs";
import { SlateSuppinfoFindUniqueArgs } from "./SlateSuppinfoFindUniqueArgs";
import { SlateSuppinfo } from "./SlateSuppinfo";
import { SlateSuppinfoService } from "../slateSuppinfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateSuppinfo)
export class SlateSuppinfoResolverBase {
  constructor(
    protected readonly service: SlateSuppinfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "read",
    possession: "any",
  })
  async _slateSuppinfosMeta(
    @graphql.Args() args: SlateSuppinfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateSuppinfo])
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "read",
    possession: "any",
  })
  async slateSuppinfos(
    @graphql.Args() args: SlateSuppinfoFindManyArgs
  ): Promise<SlateSuppinfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateSuppinfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "read",
    possession: "own",
  })
  async slateSuppinfo(
    @graphql.Args() args: SlateSuppinfoFindUniqueArgs
  ): Promise<SlateSuppinfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateSuppinfo)
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "create",
    possession: "any",
  })
  async createSlateSuppinfo(
    @graphql.Args() args: CreateSlateSuppinfoArgs
  ): Promise<SlateSuppinfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateSuppinfo)
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "update",
    possession: "any",
  })
  async updateSlateSuppinfo(
    @graphql.Args() args: UpdateSlateSuppinfoArgs
  ): Promise<SlateSuppinfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateSuppinfo)
  @nestAccessControl.UseRoles({
    resource: "SlateSuppinfo",
    action: "delete",
    possession: "any",
  })
  async deleteSlateSuppinfo(
    @graphql.Args() args: DeleteSlateSuppinfoArgs
  ): Promise<SlateSuppinfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
