/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateVeteranInfoArgs } from "./CreateVeteranInfoArgs";
import { UpdateVeteranInfoArgs } from "./UpdateVeteranInfoArgs";
import { DeleteVeteranInfoArgs } from "./DeleteVeteranInfoArgs";
import { VeteranInfoCountArgs } from "./VeteranInfoCountArgs";
import { VeteranInfoFindManyArgs } from "./VeteranInfoFindManyArgs";
import { VeteranInfoFindUniqueArgs } from "./VeteranInfoFindUniqueArgs";
import { VeteranInfo } from "./VeteranInfo";
import { VeteranInfoService } from "../veteranInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VeteranInfo)
export class VeteranInfoResolverBase {
  constructor(
    protected readonly service: VeteranInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "read",
    possession: "any",
  })
  async _veteranInfosMeta(
    @graphql.Args() args: VeteranInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VeteranInfo])
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "read",
    possession: "any",
  })
  async veteranInfos(
    @graphql.Args() args: VeteranInfoFindManyArgs
  ): Promise<VeteranInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VeteranInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "read",
    possession: "own",
  })
  async veteranInfo(
    @graphql.Args() args: VeteranInfoFindUniqueArgs
  ): Promise<VeteranInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VeteranInfo)
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "create",
    possession: "any",
  })
  async createVeteranInfo(
    @graphql.Args() args: CreateVeteranInfoArgs
  ): Promise<VeteranInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VeteranInfo)
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "update",
    possession: "any",
  })
  async updateVeteranInfo(
    @graphql.Args() args: UpdateVeteranInfoArgs
  ): Promise<VeteranInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VeteranInfo)
  @nestAccessControl.UseRoles({
    resource: "VeteranInfo",
    action: "delete",
    possession: "any",
  })
  async deleteVeteranInfo(
    @graphql.Args() args: DeleteVeteranInfoArgs
  ): Promise<VeteranInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
