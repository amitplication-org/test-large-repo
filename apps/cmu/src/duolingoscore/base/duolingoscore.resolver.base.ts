/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDuolingoscoreArgs } from "./CreateDuolingoscoreArgs";
import { UpdateDuolingoscoreArgs } from "./UpdateDuolingoscoreArgs";
import { DeleteDuolingoscoreArgs } from "./DeleteDuolingoscoreArgs";
import { DuolingoscoreCountArgs } from "./DuolingoscoreCountArgs";
import { DuolingoscoreFindManyArgs } from "./DuolingoscoreFindManyArgs";
import { DuolingoscoreFindUniqueArgs } from "./DuolingoscoreFindUniqueArgs";
import { Duolingoscore } from "./Duolingoscore";
import { DuolingoscoreService } from "../duolingoscore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Duolingoscore)
export class DuolingoscoreResolverBase {
  constructor(
    protected readonly service: DuolingoscoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "read",
    possession: "any",
  })
  async _duolingoscoresMeta(
    @graphql.Args() args: DuolingoscoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Duolingoscore])
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "read",
    possession: "any",
  })
  async duolingoscores(
    @graphql.Args() args: DuolingoscoreFindManyArgs
  ): Promise<Duolingoscore[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Duolingoscore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "read",
    possession: "own",
  })
  async duolingoscore(
    @graphql.Args() args: DuolingoscoreFindUniqueArgs
  ): Promise<Duolingoscore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Duolingoscore)
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "create",
    possession: "any",
  })
  async createDuolingoscore(
    @graphql.Args() args: CreateDuolingoscoreArgs
  ): Promise<Duolingoscore> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Duolingoscore)
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "update",
    possession: "any",
  })
  async updateDuolingoscore(
    @graphql.Args() args: UpdateDuolingoscoreArgs
  ): Promise<Duolingoscore | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Duolingoscore)
  @nestAccessControl.UseRoles({
    resource: "Duolingoscore",
    action: "delete",
    possession: "any",
  })
  async deleteDuolingoscore(
    @graphql.Args() args: DeleteDuolingoscoreArgs
  ): Promise<Duolingoscore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
