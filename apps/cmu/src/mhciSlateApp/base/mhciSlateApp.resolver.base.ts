/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMhciSlateAppArgs } from "./CreateMhciSlateAppArgs";
import { UpdateMhciSlateAppArgs } from "./UpdateMhciSlateAppArgs";
import { DeleteMhciSlateAppArgs } from "./DeleteMhciSlateAppArgs";
import { MhciSlateAppCountArgs } from "./MhciSlateAppCountArgs";
import { MhciSlateAppFindManyArgs } from "./MhciSlateAppFindManyArgs";
import { MhciSlateAppFindUniqueArgs } from "./MhciSlateAppFindUniqueArgs";
import { MhciSlateApp } from "./MhciSlateApp";
import { MhciSlateAppService } from "../mhciSlateApp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MhciSlateApp)
export class MhciSlateAppResolverBase {
  constructor(
    protected readonly service: MhciSlateAppService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "read",
    possession: "any",
  })
  async _mhciSlateAppsMeta(
    @graphql.Args() args: MhciSlateAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MhciSlateApp])
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "read",
    possession: "any",
  })
  async mhciSlateApps(
    @graphql.Args() args: MhciSlateAppFindManyArgs
  ): Promise<MhciSlateApp[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MhciSlateApp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "read",
    possession: "own",
  })
  async mhciSlateApp(
    @graphql.Args() args: MhciSlateAppFindUniqueArgs
  ): Promise<MhciSlateApp | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateApp)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "create",
    possession: "any",
  })
  async createMhciSlateApp(
    @graphql.Args() args: CreateMhciSlateAppArgs
  ): Promise<MhciSlateApp> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateApp)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "update",
    possession: "any",
  })
  async updateMhciSlateApp(
    @graphql.Args() args: UpdateMhciSlateAppArgs
  ): Promise<MhciSlateApp | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlateApp)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateApp",
    action: "delete",
    possession: "any",
  })
  async deleteMhciSlateApp(
    @graphql.Args() args: DeleteMhciSlateAppArgs
  ): Promise<MhciSlateApp | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
