/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSearchTextArgs } from "./CreateSearchTextArgs";
import { UpdateSearchTextArgs } from "./UpdateSearchTextArgs";
import { DeleteSearchTextArgs } from "./DeleteSearchTextArgs";
import { SearchTextCountArgs } from "./SearchTextCountArgs";
import { SearchTextFindManyArgs } from "./SearchTextFindManyArgs";
import { SearchTextFindUniqueArgs } from "./SearchTextFindUniqueArgs";
import { SearchText } from "./SearchText";
import { SearchTextService } from "../searchText.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SearchText)
export class SearchTextResolverBase {
  constructor(
    protected readonly service: SearchTextService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "read",
    possession: "any",
  })
  async _searchTextsMeta(
    @graphql.Args() args: SearchTextCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SearchText])
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "read",
    possession: "any",
  })
  async searchTexts(
    @graphql.Args() args: SearchTextFindManyArgs
  ): Promise<SearchText[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SearchText, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "read",
    possession: "own",
  })
  async searchText(
    @graphql.Args() args: SearchTextFindUniqueArgs
  ): Promise<SearchText | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SearchText)
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "create",
    possession: "any",
  })
  async createSearchText(
    @graphql.Args() args: CreateSearchTextArgs
  ): Promise<SearchText> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SearchText)
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "update",
    possession: "any",
  })
  async updateSearchText(
    @graphql.Args() args: UpdateSearchTextArgs
  ): Promise<SearchText | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchText)
  @nestAccessControl.UseRoles({
    resource: "SearchText",
    action: "delete",
    possession: "any",
  })
  async deleteSearchText(
    @graphql.Args() args: DeleteSearchTextArgs
  ): Promise<SearchText | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
