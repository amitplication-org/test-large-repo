/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTagMemberArgs } from "./CreateTagMemberArgs";
import { UpdateTagMemberArgs } from "./UpdateTagMemberArgs";
import { DeleteTagMemberArgs } from "./DeleteTagMemberArgs";
import { TagMemberCountArgs } from "./TagMemberCountArgs";
import { TagMemberFindManyArgs } from "./TagMemberFindManyArgs";
import { TagMemberFindUniqueArgs } from "./TagMemberFindUniqueArgs";
import { TagMember } from "./TagMember";
import { TagMemberService } from "../tagMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TagMember)
export class TagMemberResolverBase {
  constructor(
    protected readonly service: TagMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "read",
    possession: "any",
  })
  async _tagMembersMeta(
    @graphql.Args() args: TagMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TagMember])
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "read",
    possession: "any",
  })
  async tagMembers(
    @graphql.Args() args: TagMemberFindManyArgs
  ): Promise<TagMember[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TagMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "read",
    possession: "own",
  })
  async tagMember(
    @graphql.Args() args: TagMemberFindUniqueArgs
  ): Promise<TagMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TagMember)
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "create",
    possession: "any",
  })
  async createTagMember(
    @graphql.Args() args: CreateTagMemberArgs
  ): Promise<TagMember> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TagMember)
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "update",
    possession: "any",
  })
  async updateTagMember(
    @graphql.Args() args: UpdateTagMemberArgs
  ): Promise<TagMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagMember)
  @nestAccessControl.UseRoles({
    resource: "TagMember",
    action: "delete",
    possession: "any",
  })
  async deleteTagMember(
    @graphql.Args() args: DeleteTagMemberArgs
  ): Promise<TagMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
