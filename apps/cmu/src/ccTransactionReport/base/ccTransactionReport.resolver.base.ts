/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCcTransactionReportArgs } from "./CreateCcTransactionReportArgs";
import { UpdateCcTransactionReportArgs } from "./UpdateCcTransactionReportArgs";
import { DeleteCcTransactionReportArgs } from "./DeleteCcTransactionReportArgs";
import { CcTransactionReportCountArgs } from "./CcTransactionReportCountArgs";
import { CcTransactionReportFindManyArgs } from "./CcTransactionReportFindManyArgs";
import { CcTransactionReportFindUniqueArgs } from "./CcTransactionReportFindUniqueArgs";
import { CcTransactionReport } from "./CcTransactionReport";
import { CcTransactionReportService } from "../ccTransactionReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CcTransactionReport)
export class CcTransactionReportResolverBase {
  constructor(
    protected readonly service: CcTransactionReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "read",
    possession: "any",
  })
  async _ccTransactionReportsMeta(
    @graphql.Args() args: CcTransactionReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CcTransactionReport])
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "read",
    possession: "any",
  })
  async ccTransactionReports(
    @graphql.Args() args: CcTransactionReportFindManyArgs
  ): Promise<CcTransactionReport[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CcTransactionReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "read",
    possession: "own",
  })
  async ccTransactionReport(
    @graphql.Args() args: CcTransactionReportFindUniqueArgs
  ): Promise<CcTransactionReport | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CcTransactionReport)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "create",
    possession: "any",
  })
  async createCcTransactionReport(
    @graphql.Args() args: CreateCcTransactionReportArgs
  ): Promise<CcTransactionReport> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CcTransactionReport)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "update",
    possession: "any",
  })
  async updateCcTransactionReport(
    @graphql.Args() args: UpdateCcTransactionReportArgs
  ): Promise<CcTransactionReport | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CcTransactionReport)
  @nestAccessControl.UseRoles({
    resource: "CcTransactionReport",
    action: "delete",
    possession: "any",
  })
  async deleteCcTransactionReport(
    @graphql.Args() args: DeleteCcTransactionReportArgs
  ): Promise<CcTransactionReport | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
