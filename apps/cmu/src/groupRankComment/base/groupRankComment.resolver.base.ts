/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGroupRankCommentArgs } from "./CreateGroupRankCommentArgs";
import { UpdateGroupRankCommentArgs } from "./UpdateGroupRankCommentArgs";
import { DeleteGroupRankCommentArgs } from "./DeleteGroupRankCommentArgs";
import { GroupRankCommentCountArgs } from "./GroupRankCommentCountArgs";
import { GroupRankCommentFindManyArgs } from "./GroupRankCommentFindManyArgs";
import { GroupRankCommentFindUniqueArgs } from "./GroupRankCommentFindUniqueArgs";
import { GroupRankComment } from "./GroupRankComment";
import { GroupRankCommentService } from "../groupRankComment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GroupRankComment)
export class GroupRankCommentResolverBase {
  constructor(
    protected readonly service: GroupRankCommentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "read",
    possession: "any",
  })
  async _groupRankCommentsMeta(
    @graphql.Args() args: GroupRankCommentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GroupRankComment])
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "read",
    possession: "any",
  })
  async groupRankComments(
    @graphql.Args() args: GroupRankCommentFindManyArgs
  ): Promise<GroupRankComment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GroupRankComment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "read",
    possession: "own",
  })
  async groupRankComment(
    @graphql.Args() args: GroupRankCommentFindUniqueArgs
  ): Promise<GroupRankComment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupRankComment)
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "create",
    possession: "any",
  })
  async createGroupRankComment(
    @graphql.Args() args: CreateGroupRankCommentArgs
  ): Promise<GroupRankComment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupRankComment)
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "update",
    possession: "any",
  })
  async updateGroupRankComment(
    @graphql.Args() args: UpdateGroupRankCommentArgs
  ): Promise<GroupRankComment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupRankComment)
  @nestAccessControl.UseRoles({
    resource: "GroupRankComment",
    action: "delete",
    possession: "any",
  })
  async deleteGroupRankComment(
    @graphql.Args() args: DeleteGroupRankCommentArgs
  ): Promise<GroupRankComment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
