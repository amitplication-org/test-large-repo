/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMergeDatafileArgs } from "./CreateMergeDatafileArgs";
import { UpdateMergeDatafileArgs } from "./UpdateMergeDatafileArgs";
import { DeleteMergeDatafileArgs } from "./DeleteMergeDatafileArgs";
import { MergeDatafileCountArgs } from "./MergeDatafileCountArgs";
import { MergeDatafileFindManyArgs } from "./MergeDatafileFindManyArgs";
import { MergeDatafileFindUniqueArgs } from "./MergeDatafileFindUniqueArgs";
import { MergeDatafile } from "./MergeDatafile";
import { MergeDatafileService } from "../mergeDatafile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MergeDatafile)
export class MergeDatafileResolverBase {
  constructor(
    protected readonly service: MergeDatafileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "read",
    possession: "any",
  })
  async _mergeDatafilesMeta(
    @graphql.Args() args: MergeDatafileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MergeDatafile])
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "read",
    possession: "any",
  })
  async mergeDatafiles(
    @graphql.Args() args: MergeDatafileFindManyArgs
  ): Promise<MergeDatafile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MergeDatafile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "read",
    possession: "own",
  })
  async mergeDatafile(
    @graphql.Args() args: MergeDatafileFindUniqueArgs
  ): Promise<MergeDatafile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MergeDatafile)
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "create",
    possession: "any",
  })
  async createMergeDatafile(
    @graphql.Args() args: CreateMergeDatafileArgs
  ): Promise<MergeDatafile> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MergeDatafile)
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "update",
    possession: "any",
  })
  async updateMergeDatafile(
    @graphql.Args() args: UpdateMergeDatafileArgs
  ): Promise<MergeDatafile | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MergeDatafile)
  @nestAccessControl.UseRoles({
    resource: "MergeDatafile",
    action: "delete",
    possession: "any",
  })
  async deleteMergeDatafile(
    @graphql.Args() args: DeleteMergeDatafileArgs
  ): Promise<MergeDatafile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
