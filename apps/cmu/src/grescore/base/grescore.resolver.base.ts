/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGrescoreArgs } from "./CreateGrescoreArgs";
import { UpdateGrescoreArgs } from "./UpdateGrescoreArgs";
import { DeleteGrescoreArgs } from "./DeleteGrescoreArgs";
import { GrescoreCountArgs } from "./GrescoreCountArgs";
import { GrescoreFindManyArgs } from "./GrescoreFindManyArgs";
import { GrescoreFindUniqueArgs } from "./GrescoreFindUniqueArgs";
import { Grescore } from "./Grescore";
import { GrescoreService } from "../grescore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Grescore)
export class GrescoreResolverBase {
  constructor(
    protected readonly service: GrescoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "read",
    possession: "any",
  })
  async _grescoresMeta(
    @graphql.Args() args: GrescoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Grescore])
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "read",
    possession: "any",
  })
  async grescores(
    @graphql.Args() args: GrescoreFindManyArgs
  ): Promise<Grescore[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Grescore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "read",
    possession: "own",
  })
  async grescore(
    @graphql.Args() args: GrescoreFindUniqueArgs
  ): Promise<Grescore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Grescore)
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "create",
    possession: "any",
  })
  async createGrescore(
    @graphql.Args() args: CreateGrescoreArgs
  ): Promise<Grescore> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Grescore)
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "update",
    possession: "any",
  })
  async updateGrescore(
    @graphql.Args() args: UpdateGrescoreArgs
  ): Promise<Grescore | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Grescore)
  @nestAccessControl.UseRoles({
    resource: "Grescore",
    action: "delete",
    possession: "any",
  })
  async deleteGrescore(
    @graphql.Args() args: DeleteGrescoreArgs
  ): Promise<Grescore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
