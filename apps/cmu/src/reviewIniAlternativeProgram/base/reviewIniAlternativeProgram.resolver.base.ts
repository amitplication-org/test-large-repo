/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReviewIniAlternativeProgramArgs } from "./CreateReviewIniAlternativeProgramArgs";
import { UpdateReviewIniAlternativeProgramArgs } from "./UpdateReviewIniAlternativeProgramArgs";
import { DeleteReviewIniAlternativeProgramArgs } from "./DeleteReviewIniAlternativeProgramArgs";
import { ReviewIniAlternativeProgramCountArgs } from "./ReviewIniAlternativeProgramCountArgs";
import { ReviewIniAlternativeProgramFindManyArgs } from "./ReviewIniAlternativeProgramFindManyArgs";
import { ReviewIniAlternativeProgramFindUniqueArgs } from "./ReviewIniAlternativeProgramFindUniqueArgs";
import { ReviewIniAlternativeProgram } from "./ReviewIniAlternativeProgram";
import { ReviewIniAlternativeProgramService } from "../reviewIniAlternativeProgram.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewIniAlternativeProgram)
export class ReviewIniAlternativeProgramResolverBase {
  constructor(
    protected readonly service: ReviewIniAlternativeProgramService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "read",
    possession: "any",
  })
  async _reviewIniAlternativeProgramsMeta(
    @graphql.Args() args: ReviewIniAlternativeProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewIniAlternativeProgram])
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "read",
    possession: "any",
  })
  async reviewIniAlternativePrograms(
    @graphql.Args() args: ReviewIniAlternativeProgramFindManyArgs
  ): Promise<ReviewIniAlternativeProgram[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewIniAlternativeProgram, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "read",
    possession: "own",
  })
  async reviewIniAlternativeProgram(
    @graphql.Args() args: ReviewIniAlternativeProgramFindUniqueArgs
  ): Promise<ReviewIniAlternativeProgram | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewIniAlternativeProgram)
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "create",
    possession: "any",
  })
  async createReviewIniAlternativeProgram(
    @graphql.Args() args: CreateReviewIniAlternativeProgramArgs
  ): Promise<ReviewIniAlternativeProgram> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewIniAlternativeProgram)
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "update",
    possession: "any",
  })
  async updateReviewIniAlternativeProgram(
    @graphql.Args() args: UpdateReviewIniAlternativeProgramArgs
  ): Promise<ReviewIniAlternativeProgram | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewIniAlternativeProgram)
  @nestAccessControl.UseRoles({
    resource: "ReviewIniAlternativeProgram",
    action: "delete",
    possession: "any",
  })
  async deleteReviewIniAlternativeProgram(
    @graphql.Args() args: DeleteReviewIniAlternativeProgramArgs
  ): Promise<ReviewIniAlternativeProgram | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
