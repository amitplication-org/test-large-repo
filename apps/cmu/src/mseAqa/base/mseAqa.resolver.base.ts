/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMseAqaArgs } from "./CreateMseAqaArgs";
import { UpdateMseAqaArgs } from "./UpdateMseAqaArgs";
import { DeleteMseAqaArgs } from "./DeleteMseAqaArgs";
import { MseAqaCountArgs } from "./MseAqaCountArgs";
import { MseAqaFindManyArgs } from "./MseAqaFindManyArgs";
import { MseAqaFindUniqueArgs } from "./MseAqaFindUniqueArgs";
import { MseAqa } from "./MseAqa";
import { MseAqaService } from "../mseAqa.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MseAqa)
export class MseAqaResolverBase {
  constructor(
    protected readonly service: MseAqaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "read",
    possession: "any",
  })
  async _mseAqasMeta(
    @graphql.Args() args: MseAqaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MseAqa])
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "read",
    possession: "any",
  })
  async mseAqas(@graphql.Args() args: MseAqaFindManyArgs): Promise<MseAqa[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MseAqa, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "read",
    possession: "own",
  })
  async mseAqa(
    @graphql.Args() args: MseAqaFindUniqueArgs
  ): Promise<MseAqa | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseAqa)
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "create",
    possession: "any",
  })
  async createMseAqa(@graphql.Args() args: CreateMseAqaArgs): Promise<MseAqa> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseAqa)
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "update",
    possession: "any",
  })
  async updateMseAqa(
    @graphql.Args() args: UpdateMseAqaArgs
  ): Promise<MseAqa | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseAqa)
  @nestAccessControl.UseRoles({
    resource: "MseAqa",
    action: "delete",
    possession: "any",
  })
  async deleteMseAqa(
    @graphql.Args() args: DeleteMseAqaArgs
  ): Promise<MseAqa | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
