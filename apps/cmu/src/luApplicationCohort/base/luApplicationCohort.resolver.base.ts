/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLuApplicationCohortArgs } from "./CreateLuApplicationCohortArgs";
import { UpdateLuApplicationCohortArgs } from "./UpdateLuApplicationCohortArgs";
import { DeleteLuApplicationCohortArgs } from "./DeleteLuApplicationCohortArgs";
import { LuApplicationCohortCountArgs } from "./LuApplicationCohortCountArgs";
import { LuApplicationCohortFindManyArgs } from "./LuApplicationCohortFindManyArgs";
import { LuApplicationCohortFindUniqueArgs } from "./LuApplicationCohortFindUniqueArgs";
import { LuApplicationCohort } from "./LuApplicationCohort";
import { LuApplicationCohortService } from "../luApplicationCohort.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LuApplicationCohort)
export class LuApplicationCohortResolverBase {
  constructor(
    protected readonly service: LuApplicationCohortService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "read",
    possession: "any",
  })
  async _luApplicationCohortsMeta(
    @graphql.Args() args: LuApplicationCohortCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LuApplicationCohort])
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "read",
    possession: "any",
  })
  async luApplicationCohorts(
    @graphql.Args() args: LuApplicationCohortFindManyArgs
  ): Promise<LuApplicationCohort[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LuApplicationCohort, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "read",
    possession: "own",
  })
  async luApplicationCohort(
    @graphql.Args() args: LuApplicationCohortFindUniqueArgs
  ): Promise<LuApplicationCohort | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationCohort)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "create",
    possession: "any",
  })
  async createLuApplicationCohort(
    @graphql.Args() args: CreateLuApplicationCohortArgs
  ): Promise<LuApplicationCohort> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationCohort)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "update",
    possession: "any",
  })
  async updateLuApplicationCohort(
    @graphql.Args() args: UpdateLuApplicationCohortArgs
  ): Promise<LuApplicationCohort | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationCohort)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationCohort",
    action: "delete",
    possession: "any",
  })
  async deleteLuApplicationCohort(
    @graphql.Args() args: DeleteLuApplicationCohortArgs
  ): Promise<LuApplicationCohort | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
