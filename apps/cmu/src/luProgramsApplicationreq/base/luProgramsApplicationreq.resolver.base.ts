/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLuProgramsApplicationreqArgs } from "./CreateLuProgramsApplicationreqArgs";
import { UpdateLuProgramsApplicationreqArgs } from "./UpdateLuProgramsApplicationreqArgs";
import { DeleteLuProgramsApplicationreqArgs } from "./DeleteLuProgramsApplicationreqArgs";
import { LuProgramsApplicationreqCountArgs } from "./LuProgramsApplicationreqCountArgs";
import { LuProgramsApplicationreqFindManyArgs } from "./LuProgramsApplicationreqFindManyArgs";
import { LuProgramsApplicationreqFindUniqueArgs } from "./LuProgramsApplicationreqFindUniqueArgs";
import { LuProgramsApplicationreq } from "./LuProgramsApplicationreq";
import { LuProgramsApplicationreqService } from "../luProgramsApplicationreq.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LuProgramsApplicationreq)
export class LuProgramsApplicationreqResolverBase {
  constructor(
    protected readonly service: LuProgramsApplicationreqService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async _luProgramsApplicationreqsMeta(
    @graphql.Args() args: LuProgramsApplicationreqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LuProgramsApplicationreq])
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async luProgramsApplicationreqs(
    @graphql.Args() args: LuProgramsApplicationreqFindManyArgs
  ): Promise<LuProgramsApplicationreq[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LuProgramsApplicationreq, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "read",
    possession: "own",
  })
  async luProgramsApplicationreq(
    @graphql.Args() args: LuProgramsApplicationreqFindUniqueArgs
  ): Promise<LuProgramsApplicationreq | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "create",
    possession: "any",
  })
  async createLuProgramsApplicationreq(
    @graphql.Args() args: CreateLuProgramsApplicationreqArgs
  ): Promise<LuProgramsApplicationreq> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "update",
    possession: "any",
  })
  async updateLuProgramsApplicationreq(
    @graphql.Args() args: UpdateLuProgramsApplicationreqArgs
  ): Promise<LuProgramsApplicationreq | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuProgramsApplicationreq)
  @nestAccessControl.UseRoles({
    resource: "LuProgramsApplicationreq",
    action: "delete",
    possession: "any",
  })
  async deleteLuProgramsApplicationreq(
    @graphql.Args() args: DeleteLuProgramsApplicationreqArgs
  ): Promise<LuProgramsApplicationreq | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
