/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateToeflArgs } from "./CreateToeflArgs";
import { UpdateToeflArgs } from "./UpdateToeflArgs";
import { DeleteToeflArgs } from "./DeleteToeflArgs";
import { ToeflCountArgs } from "./ToeflCountArgs";
import { ToeflFindManyArgs } from "./ToeflFindManyArgs";
import { ToeflFindUniqueArgs } from "./ToeflFindUniqueArgs";
import { Toefl } from "./Toefl";
import { ToeflService } from "../toefl.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Toefl)
export class ToeflResolverBase {
  constructor(
    protected readonly service: ToeflService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "read",
    possession: "any",
  })
  async _toeflsMeta(
    @graphql.Args() args: ToeflCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Toefl])
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "read",
    possession: "any",
  })
  async toefls(@graphql.Args() args: ToeflFindManyArgs): Promise<Toefl[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Toefl, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "read",
    possession: "own",
  })
  async toefl(
    @graphql.Args() args: ToeflFindUniqueArgs
  ): Promise<Toefl | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Toefl)
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "create",
    possession: "any",
  })
  async createToefl(@graphql.Args() args: CreateToeflArgs): Promise<Toefl> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Toefl)
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "update",
    possession: "any",
  })
  async updateToefl(
    @graphql.Args() args: UpdateToeflArgs
  ): Promise<Toefl | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Toefl)
  @nestAccessControl.UseRoles({
    resource: "Toefl",
    action: "delete",
    possession: "any",
  })
  async deleteToefl(
    @graphql.Args() args: DeleteToeflArgs
  ): Promise<Toefl | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
