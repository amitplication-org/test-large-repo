/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateOrgsAllArgs } from "./CreateSlateOrgsAllArgs";
import { UpdateSlateOrgsAllArgs } from "./UpdateSlateOrgsAllArgs";
import { DeleteSlateOrgsAllArgs } from "./DeleteSlateOrgsAllArgs";
import { SlateOrgsAllCountArgs } from "./SlateOrgsAllCountArgs";
import { SlateOrgsAllFindManyArgs } from "./SlateOrgsAllFindManyArgs";
import { SlateOrgsAllFindUniqueArgs } from "./SlateOrgsAllFindUniqueArgs";
import { SlateOrgsAll } from "./SlateOrgsAll";
import { SlateOrgsAllService } from "../slateOrgsAll.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateOrgsAll)
export class SlateOrgsAllResolverBase {
  constructor(
    protected readonly service: SlateOrgsAllService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "read",
    possession: "any",
  })
  async _slateOrgsAllsMeta(
    @graphql.Args() args: SlateOrgsAllCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateOrgsAll])
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "read",
    possession: "any",
  })
  async slateOrgsAlls(
    @graphql.Args() args: SlateOrgsAllFindManyArgs
  ): Promise<SlateOrgsAll[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateOrgsAll, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "read",
    possession: "own",
  })
  async slateOrgsAll(
    @graphql.Args() args: SlateOrgsAllFindUniqueArgs
  ): Promise<SlateOrgsAll | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateOrgsAll)
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "create",
    possession: "any",
  })
  async createSlateOrgsAll(
    @graphql.Args() args: CreateSlateOrgsAllArgs
  ): Promise<SlateOrgsAll> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateOrgsAll)
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "update",
    possession: "any",
  })
  async updateSlateOrgsAll(
    @graphql.Args() args: UpdateSlateOrgsAllArgs
  ): Promise<SlateOrgsAll | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateOrgsAll)
  @nestAccessControl.UseRoles({
    resource: "SlateOrgsAll",
    action: "delete",
    possession: "any",
  })
  async deleteSlateOrgsAll(
    @graphql.Args() args: DeleteSlateOrgsAllArgs
  ): Promise<SlateOrgsAll | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
