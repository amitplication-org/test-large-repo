/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateApplicationDecisionIniArgs } from "./CreateApplicationDecisionIniArgs";
import { UpdateApplicationDecisionIniArgs } from "./UpdateApplicationDecisionIniArgs";
import { DeleteApplicationDecisionIniArgs } from "./DeleteApplicationDecisionIniArgs";
import { ApplicationDecisionIniCountArgs } from "./ApplicationDecisionIniCountArgs";
import { ApplicationDecisionIniFindManyArgs } from "./ApplicationDecisionIniFindManyArgs";
import { ApplicationDecisionIniFindUniqueArgs } from "./ApplicationDecisionIniFindUniqueArgs";
import { ApplicationDecisionIni } from "./ApplicationDecisionIni";
import { ApplicationDecisionIniService } from "../applicationDecisionIni.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationDecisionIni)
export class ApplicationDecisionIniResolverBase {
  constructor(
    protected readonly service: ApplicationDecisionIniService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "read",
    possession: "any",
  })
  async _applicationDecisionInisMeta(
    @graphql.Args() args: ApplicationDecisionIniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationDecisionIni])
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "read",
    possession: "any",
  })
  async applicationDecisionInis(
    @graphql.Args() args: ApplicationDecisionIniFindManyArgs
  ): Promise<ApplicationDecisionIni[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationDecisionIni, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "read",
    possession: "own",
  })
  async applicationDecisionIni(
    @graphql.Args() args: ApplicationDecisionIniFindUniqueArgs
  ): Promise<ApplicationDecisionIni | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDecisionIni)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "create",
    possession: "any",
  })
  async createApplicationDecisionIni(
    @graphql.Args() args: CreateApplicationDecisionIniArgs
  ): Promise<ApplicationDecisionIni> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDecisionIni)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "update",
    possession: "any",
  })
  async updateApplicationDecisionIni(
    @graphql.Args() args: UpdateApplicationDecisionIniArgs
  ): Promise<ApplicationDecisionIni | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationDecisionIni)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDecisionIni",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationDecisionIni(
    @graphql.Args() args: DeleteApplicationDecisionIniArgs
  ): Promise<ApplicationDecisionIni | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
