/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMseLetterRecsDecisionArgs } from "./CreateMseLetterRecsDecisionArgs";
import { UpdateMseLetterRecsDecisionArgs } from "./UpdateMseLetterRecsDecisionArgs";
import { DeleteMseLetterRecsDecisionArgs } from "./DeleteMseLetterRecsDecisionArgs";
import { MseLetterRecsDecisionCountArgs } from "./MseLetterRecsDecisionCountArgs";
import { MseLetterRecsDecisionFindManyArgs } from "./MseLetterRecsDecisionFindManyArgs";
import { MseLetterRecsDecisionFindUniqueArgs } from "./MseLetterRecsDecisionFindUniqueArgs";
import { MseLetterRecsDecision } from "./MseLetterRecsDecision";
import { MseLetterRecsDecisionService } from "../mseLetterRecsDecision.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MseLetterRecsDecision)
export class MseLetterRecsDecisionResolverBase {
  constructor(
    protected readonly service: MseLetterRecsDecisionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "read",
    possession: "any",
  })
  async _mseLetterRecsDecisionsMeta(
    @graphql.Args() args: MseLetterRecsDecisionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MseLetterRecsDecision])
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "read",
    possession: "any",
  })
  async mseLetterRecsDecisions(
    @graphql.Args() args: MseLetterRecsDecisionFindManyArgs
  ): Promise<MseLetterRecsDecision[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MseLetterRecsDecision, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "read",
    possession: "own",
  })
  async mseLetterRecsDecision(
    @graphql.Args() args: MseLetterRecsDecisionFindUniqueArgs
  ): Promise<MseLetterRecsDecision | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseLetterRecsDecision)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "create",
    possession: "any",
  })
  async createMseLetterRecsDecision(
    @graphql.Args() args: CreateMseLetterRecsDecisionArgs
  ): Promise<MseLetterRecsDecision> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseLetterRecsDecision)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "update",
    possession: "any",
  })
  async updateMseLetterRecsDecision(
    @graphql.Args() args: UpdateMseLetterRecsDecisionArgs
  ): Promise<MseLetterRecsDecision | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseLetterRecsDecision)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRecsDecision",
    action: "delete",
    possession: "any",
  })
  async deleteMseLetterRecsDecision(
    @graphql.Args() args: DeleteMseLetterRecsDecisionArgs
  ): Promise<MseLetterRecsDecision | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
