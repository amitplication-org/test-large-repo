/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMhciSlateIeltArgs } from "./CreateMhciSlateIeltArgs";
import { UpdateMhciSlateIeltArgs } from "./UpdateMhciSlateIeltArgs";
import { DeleteMhciSlateIeltArgs } from "./DeleteMhciSlateIeltArgs";
import { MhciSlateIeltCountArgs } from "./MhciSlateIeltCountArgs";
import { MhciSlateIeltFindManyArgs } from "./MhciSlateIeltFindManyArgs";
import { MhciSlateIeltFindUniqueArgs } from "./MhciSlateIeltFindUniqueArgs";
import { MhciSlateIelt } from "./MhciSlateIelt";
import { MhciSlateIeltService } from "../mhciSlateIelt.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MhciSlateIelt)
export class MhciSlateIeltResolverBase {
  constructor(
    protected readonly service: MhciSlateIeltService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "read",
    possession: "any",
  })
  async _mhciSlateIeltsMeta(
    @graphql.Args() args: MhciSlateIeltCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MhciSlateIelt])
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "read",
    possession: "any",
  })
  async mhciSlateIelts(
    @graphql.Args() args: MhciSlateIeltFindManyArgs
  ): Promise<MhciSlateIelt[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MhciSlateIelt, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "read",
    possession: "own",
  })
  async mhciSlateIelt(
    @graphql.Args() args: MhciSlateIeltFindUniqueArgs
  ): Promise<MhciSlateIelt | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "create",
    possession: "any",
  })
  async createMhciSlateIelt(
    @graphql.Args() args: CreateMhciSlateIeltArgs
  ): Promise<MhciSlateIelt> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "update",
    possession: "any",
  })
  async updateMhciSlateIelt(
    @graphql.Args() args: UpdateMhciSlateIeltArgs
  ): Promise<MhciSlateIelt | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateIelt",
    action: "delete",
    possession: "any",
  })
  async deleteMhciSlateIelt(
    @graphql.Args() args: DeleteMhciSlateIeltArgs
  ): Promise<MhciSlateIelt | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
