/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGmatscoreArgs } from "./CreateGmatscoreArgs";
import { UpdateGmatscoreArgs } from "./UpdateGmatscoreArgs";
import { DeleteGmatscoreArgs } from "./DeleteGmatscoreArgs";
import { GmatscoreCountArgs } from "./GmatscoreCountArgs";
import { GmatscoreFindManyArgs } from "./GmatscoreFindManyArgs";
import { GmatscoreFindUniqueArgs } from "./GmatscoreFindUniqueArgs";
import { Gmatscore } from "./Gmatscore";
import { GmatscoreService } from "../gmatscore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gmatscore)
export class GmatscoreResolverBase {
  constructor(
    protected readonly service: GmatscoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "read",
    possession: "any",
  })
  async _gmatscoresMeta(
    @graphql.Args() args: GmatscoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Gmatscore])
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "read",
    possession: "any",
  })
  async gmatscores(
    @graphql.Args() args: GmatscoreFindManyArgs
  ): Promise<Gmatscore[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Gmatscore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "read",
    possession: "own",
  })
  async gmatscore(
    @graphql.Args() args: GmatscoreFindUniqueArgs
  ): Promise<Gmatscore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gmatscore)
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "create",
    possession: "any",
  })
  async createGmatscore(
    @graphql.Args() args: CreateGmatscoreArgs
  ): Promise<Gmatscore> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gmatscore)
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "update",
    possession: "any",
  })
  async updateGmatscore(
    @graphql.Args() args: UpdateGmatscoreArgs
  ): Promise<Gmatscore | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gmatscore)
  @nestAccessControl.UseRoles({
    resource: "Gmatscore",
    action: "delete",
    possession: "any",
  })
  async deleteGmatscore(
    @graphql.Args() args: DeleteGmatscoreArgs
  ): Promise<Gmatscore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
