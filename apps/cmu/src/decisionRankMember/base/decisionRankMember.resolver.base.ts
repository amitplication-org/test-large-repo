/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDecisionRankMemberArgs } from "./CreateDecisionRankMemberArgs";
import { UpdateDecisionRankMemberArgs } from "./UpdateDecisionRankMemberArgs";
import { DeleteDecisionRankMemberArgs } from "./DeleteDecisionRankMemberArgs";
import { DecisionRankMemberCountArgs } from "./DecisionRankMemberCountArgs";
import { DecisionRankMemberFindManyArgs } from "./DecisionRankMemberFindManyArgs";
import { DecisionRankMemberFindUniqueArgs } from "./DecisionRankMemberFindUniqueArgs";
import { DecisionRankMember } from "./DecisionRankMember";
import { DecisionRankMemberService } from "../decisionRankMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DecisionRankMember)
export class DecisionRankMemberResolverBase {
  constructor(
    protected readonly service: DecisionRankMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "read",
    possession: "any",
  })
  async _decisionRankMembersMeta(
    @graphql.Args() args: DecisionRankMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DecisionRankMember])
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "read",
    possession: "any",
  })
  async decisionRankMembers(
    @graphql.Args() args: DecisionRankMemberFindManyArgs
  ): Promise<DecisionRankMember[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DecisionRankMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "read",
    possession: "own",
  })
  async decisionRankMember(
    @graphql.Args() args: DecisionRankMemberFindUniqueArgs
  ): Promise<DecisionRankMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DecisionRankMember)
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "create",
    possession: "any",
  })
  async createDecisionRankMember(
    @graphql.Args() args: CreateDecisionRankMemberArgs
  ): Promise<DecisionRankMember> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DecisionRankMember)
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "update",
    possession: "any",
  })
  async updateDecisionRankMember(
    @graphql.Args() args: UpdateDecisionRankMemberArgs
  ): Promise<DecisionRankMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DecisionRankMember)
  @nestAccessControl.UseRoles({
    resource: "DecisionRankMember",
    action: "delete",
    possession: "any",
  })
  async deleteDecisionRankMember(
    @graphql.Args() args: DeleteDecisionRankMemberArgs
  ): Promise<DecisionRankMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
