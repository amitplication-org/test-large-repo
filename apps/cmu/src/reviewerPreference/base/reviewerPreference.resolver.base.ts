/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReviewerPreferenceArgs } from "./CreateReviewerPreferenceArgs";
import { UpdateReviewerPreferenceArgs } from "./UpdateReviewerPreferenceArgs";
import { DeleteReviewerPreferenceArgs } from "./DeleteReviewerPreferenceArgs";
import { ReviewerPreferenceCountArgs } from "./ReviewerPreferenceCountArgs";
import { ReviewerPreferenceFindManyArgs } from "./ReviewerPreferenceFindManyArgs";
import { ReviewerPreferenceFindUniqueArgs } from "./ReviewerPreferenceFindUniqueArgs";
import { ReviewerPreference } from "./ReviewerPreference";
import { ReviewerPreferenceService } from "../reviewerPreference.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewerPreference)
export class ReviewerPreferenceResolverBase {
  constructor(
    protected readonly service: ReviewerPreferenceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "read",
    possession: "any",
  })
  async _reviewerPreferencesMeta(
    @graphql.Args() args: ReviewerPreferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewerPreference])
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "read",
    possession: "any",
  })
  async reviewerPreferences(
    @graphql.Args() args: ReviewerPreferenceFindManyArgs
  ): Promise<ReviewerPreference[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewerPreference, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "read",
    possession: "own",
  })
  async reviewerPreference(
    @graphql.Args() args: ReviewerPreferenceFindUniqueArgs
  ): Promise<ReviewerPreference | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewerPreference)
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "create",
    possession: "any",
  })
  async createReviewerPreference(
    @graphql.Args() args: CreateReviewerPreferenceArgs
  ): Promise<ReviewerPreference> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewerPreference)
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "update",
    possession: "any",
  })
  async updateReviewerPreference(
    @graphql.Args() args: UpdateReviewerPreferenceArgs
  ): Promise<ReviewerPreference | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewerPreference)
  @nestAccessControl.UseRoles({
    resource: "ReviewerPreference",
    action: "delete",
    possession: "any",
  })
  async deleteReviewerPreference(
    @graphql.Args() args: DeleteReviewerPreferenceArgs
  ): Promise<ReviewerPreference | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
