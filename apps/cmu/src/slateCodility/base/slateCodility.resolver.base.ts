/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateCodilityArgs } from "./CreateSlateCodilityArgs";
import { UpdateSlateCodilityArgs } from "./UpdateSlateCodilityArgs";
import { DeleteSlateCodilityArgs } from "./DeleteSlateCodilityArgs";
import { SlateCodilityCountArgs } from "./SlateCodilityCountArgs";
import { SlateCodilityFindManyArgs } from "./SlateCodilityFindManyArgs";
import { SlateCodilityFindUniqueArgs } from "./SlateCodilityFindUniqueArgs";
import { SlateCodility } from "./SlateCodility";
import { SlateCodilityService } from "../slateCodility.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateCodility)
export class SlateCodilityResolverBase {
  constructor(
    protected readonly service: SlateCodilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "read",
    possession: "any",
  })
  async _slateCodilitiesMeta(
    @graphql.Args() args: SlateCodilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateCodility])
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "read",
    possession: "any",
  })
  async slateCodilities(
    @graphql.Args() args: SlateCodilityFindManyArgs
  ): Promise<SlateCodility[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateCodility, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "read",
    possession: "own",
  })
  async slateCodility(
    @graphql.Args() args: SlateCodilityFindUniqueArgs
  ): Promise<SlateCodility | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateCodility)
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "create",
    possession: "any",
  })
  async createSlateCodility(
    @graphql.Args() args: CreateSlateCodilityArgs
  ): Promise<SlateCodility> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateCodility)
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "update",
    possession: "any",
  })
  async updateSlateCodility(
    @graphql.Args() args: UpdateSlateCodilityArgs
  ): Promise<SlateCodility | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateCodility)
  @nestAccessControl.UseRoles({
    resource: "SlateCodility",
    action: "delete",
    possession: "any",
  })
  async deleteSlateCodility(
    @graphql.Args() args: DeleteSlateCodilityArgs
  ): Promise<SlateCodility | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
