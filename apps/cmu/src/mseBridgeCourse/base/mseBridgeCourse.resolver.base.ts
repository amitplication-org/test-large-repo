/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMseBridgeCourseArgs } from "./CreateMseBridgeCourseArgs";
import { UpdateMseBridgeCourseArgs } from "./UpdateMseBridgeCourseArgs";
import { DeleteMseBridgeCourseArgs } from "./DeleteMseBridgeCourseArgs";
import { MseBridgeCourseCountArgs } from "./MseBridgeCourseCountArgs";
import { MseBridgeCourseFindManyArgs } from "./MseBridgeCourseFindManyArgs";
import { MseBridgeCourseFindUniqueArgs } from "./MseBridgeCourseFindUniqueArgs";
import { MseBridgeCourse } from "./MseBridgeCourse";
import { MseBridgeCourseService } from "../mseBridgeCourse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MseBridgeCourse)
export class MseBridgeCourseResolverBase {
  constructor(
    protected readonly service: MseBridgeCourseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "read",
    possession: "any",
  })
  async _mseBridgeCoursesMeta(
    @graphql.Args() args: MseBridgeCourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MseBridgeCourse])
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "read",
    possession: "any",
  })
  async mseBridgeCourses(
    @graphql.Args() args: MseBridgeCourseFindManyArgs
  ): Promise<MseBridgeCourse[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MseBridgeCourse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "read",
    possession: "own",
  })
  async mseBridgeCourse(
    @graphql.Args() args: MseBridgeCourseFindUniqueArgs
  ): Promise<MseBridgeCourse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseBridgeCourse)
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "create",
    possession: "any",
  })
  async createMseBridgeCourse(
    @graphql.Args() args: CreateMseBridgeCourseArgs
  ): Promise<MseBridgeCourse> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseBridgeCourse)
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "update",
    possession: "any",
  })
  async updateMseBridgeCourse(
    @graphql.Args() args: UpdateMseBridgeCourseArgs
  ): Promise<MseBridgeCourse | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseBridgeCourse)
  @nestAccessControl.UseRoles({
    resource: "MseBridgeCourse",
    action: "delete",
    possession: "any",
  })
  async deleteMseBridgeCourse(
    @graphql.Args() args: DeleteMseBridgeCourseArgs
  ): Promise<MseBridgeCourse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
