/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApplicationService } from "../application.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApplicationCreateInput } from "./ApplicationCreateInput";
import { ApplicationWhereInput } from "./ApplicationWhereInput";
import { ApplicationWhereUniqueInput } from "./ApplicationWhereUniqueInput";
import { ApplicationFindManyArgs } from "./ApplicationFindManyArgs";
import { ApplicationUpdateInput } from "./ApplicationUpdateInput";
import { Application } from "./Application";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { LuApplicationProgramWhereUniqueInput } from "../../luApplicationProgram/base/LuApplicationProgramWhereUniqueInput";
import { PeriodApplicationFindManyArgs } from "../../periodApplication/base/PeriodApplicationFindManyArgs";
import { PeriodApplication } from "../../periodApplication/base/PeriodApplication";
import { PeriodApplicationWhereUniqueInput } from "../../periodApplication/base/PeriodApplicationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApplicationControllerBase {
  constructor(
    protected readonly service: ApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Application })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: ApplicationCreateInput
  ): Promise<Application> {
    return await this.service.create({
      data: data,
      select: {
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        cnbc: true,
        complete: true,
        createdDate: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        cups: true,
        curEnrolled: true,
        hide: true,
        honors: true,
        id: true,
        invitationEmailSent: true,
        mastersReviewWaiver: true,
        name: true,
        notificationsent: true,
        otherInst: true,
        paid: true,
        paymentamount: true,
        paymentdate: true,
        paymenttype: true,
        pier: true,
        portfolioLink: true,
        portfolioPassword: true,
        portfoliosubmitted: true,
        previousCoursework: true,
        recordsPermission: true,
        recruitingEvent: true,
        referralToProgram: true,
        rejectionSent: true,
        round2: true,
        round3: true,
        sentToProgram: true,
        statementofpurpose: true,
        studentCommit: true,
        submitted: true,
        submittedDate: true,
        userId: true,
        waitlistSent: true,
        waive: true,
        waivedate: true,
        waiveHigherFee: true,
        waiveToefl: true,
        womenfellowship: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Application] })
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Application[]> {
    const args = plainToClass(ApplicationFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        cnbc: true,
        complete: true,
        createdDate: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        cups: true,
        curEnrolled: true,
        hide: true,
        honors: true,
        id: true,
        invitationEmailSent: true,
        mastersReviewWaiver: true,
        name: true,
        notificationsent: true,
        otherInst: true,
        paid: true,
        paymentamount: true,
        paymentdate: true,
        paymenttype: true,
        pier: true,
        portfolioLink: true,
        portfolioPassword: true,
        portfoliosubmitted: true,
        previousCoursework: true,
        recordsPermission: true,
        recruitingEvent: true,
        referralToProgram: true,
        rejectionSent: true,
        round2: true,
        round3: true,
        sentToProgram: true,
        statementofpurpose: true,
        studentCommit: true,
        submitted: true,
        submittedDate: true,
        userId: true,
        waitlistSent: true,
        waive: true,
        waivedate: true,
        waiveHigherFee: true,
        waiveToefl: true,
        womenfellowship: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        cnbc: true,
        complete: true,
        createdDate: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        cups: true,
        curEnrolled: true,
        hide: true,
        honors: true,
        id: true,
        invitationEmailSent: true,
        mastersReviewWaiver: true,
        name: true,
        notificationsent: true,
        otherInst: true,
        paid: true,
        paymentamount: true,
        paymentdate: true,
        paymenttype: true,
        pier: true,
        portfolioLink: true,
        portfolioPassword: true,
        portfoliosubmitted: true,
        previousCoursework: true,
        recordsPermission: true,
        recruitingEvent: true,
        referralToProgram: true,
        rejectionSent: true,
        round2: true,
        round3: true,
        sentToProgram: true,
        statementofpurpose: true,
        studentCommit: true,
        submitted: true,
        submittedDate: true,
        userId: true,
        waitlistSent: true,
        waive: true,
        waivedate: true,
        waiveHigherFee: true,
        waiveToefl: true,
        womenfellowship: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() data: ApplicationUpdateInput
  ): Promise<Application | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          area1: true,
          area2: true,
          area3: true,
          buckleywaive: true,
          cnbc: true,
          complete: true,
          createdDate: true,
          crossDeptProgs: true,
          crossDeptProgsOther: true,
          cups: true,
          curEnrolled: true,
          hide: true,
          honors: true,
          id: true,
          invitationEmailSent: true,
          mastersReviewWaiver: true,
          name: true,
          notificationsent: true,
          otherInst: true,
          paid: true,
          paymentamount: true,
          paymentdate: true,
          paymenttype: true,
          pier: true,
          portfolioLink: true,
          portfolioPassword: true,
          portfoliosubmitted: true,
          previousCoursework: true,
          recordsPermission: true,
          recruitingEvent: true,
          referralToProgram: true,
          rejectionSent: true,
          round2: true,
          round3: true,
          sentToProgram: true,
          statementofpurpose: true,
          studentCommit: true,
          submitted: true,
          submittedDate: true,
          userId: true,
          waitlistSent: true,
          waive: true,
          waivedate: true,
          waiveHigherFee: true,
          waiveToefl: true,
          womenfellowship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          area1: true,
          area2: true,
          area3: true,
          buckleywaive: true,
          cnbc: true,
          complete: true,
          createdDate: true,
          crossDeptProgs: true,
          crossDeptProgsOther: true,
          cups: true,
          curEnrolled: true,
          hide: true,
          honors: true,
          id: true,
          invitationEmailSent: true,
          mastersReviewWaiver: true,
          name: true,
          notificationsent: true,
          otherInst: true,
          paid: true,
          paymentamount: true,
          paymentdate: true,
          paymenttype: true,
          pier: true,
          portfolioLink: true,
          portfolioPassword: true,
          portfoliosubmitted: true,
          previousCoursework: true,
          recordsPermission: true,
          recruitingEvent: true,
          referralToProgram: true,
          rejectionSent: true,
          round2: true,
          round3: true,
          sentToProgram: true,
          statementofpurpose: true,
          studentCommit: true,
          submitted: true,
          submittedDate: true,
          userId: true,
          waitlistSent: true,
          waive: true,
          waivedate: true,
          waiveHigherFee: true,
          waiveToefl: true,
          womenfellowship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/luApplicationPrograms")
  @ApiNestedQuery(LuApplicationProgramFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "any",
  })
  async findManyLuApplicationPrograms(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<LuApplicationProgram[]> {
    const query = plainToClass(LuApplicationProgramFindManyArgs, request.query);
    const results = await this.service.findLuApplicationPrograms(params.id, {
      ...query,
      select: {
        admissionStatus: true,
        admit: true,
        admitComments: true,

        application: {
          select: {
            id: true,
          },
        },

        choice: true,
        decision: true,
        faccontact: true,
        id: true,
        ltichoice: true,

        programs: {
          select: {
            id: true,
          },
        },

        round2: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        stucontact: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/periodApplication")
  @ApiNestedQuery(PeriodApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PeriodApplication",
    action: "read",
    possession: "any",
  })
  async findManyPeriodApplication(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<PeriodApplication[]> {
    const query = plainToClass(PeriodApplicationFindManyArgs, request.query);
    const results = await this.service.findPeriodApplication(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        id: true,

        period: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/periodApplication")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectPeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/periodApplication")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updatePeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/periodApplication")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectPeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
