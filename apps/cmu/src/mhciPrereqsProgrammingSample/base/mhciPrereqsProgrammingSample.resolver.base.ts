/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMhciPrereqsProgrammingSampleArgs } from "./CreateMhciPrereqsProgrammingSampleArgs";
import { UpdateMhciPrereqsProgrammingSampleArgs } from "./UpdateMhciPrereqsProgrammingSampleArgs";
import { DeleteMhciPrereqsProgrammingSampleArgs } from "./DeleteMhciPrereqsProgrammingSampleArgs";
import { MhciPrereqsProgrammingSampleCountArgs } from "./MhciPrereqsProgrammingSampleCountArgs";
import { MhciPrereqsProgrammingSampleFindManyArgs } from "./MhciPrereqsProgrammingSampleFindManyArgs";
import { MhciPrereqsProgrammingSampleFindUniqueArgs } from "./MhciPrereqsProgrammingSampleFindUniqueArgs";
import { MhciPrereqsProgrammingSample } from "./MhciPrereqsProgrammingSample";
import { MhciPrereqsProgrammingSampleService } from "../mhciPrereqsProgrammingSample.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MhciPrereqsProgrammingSample)
export class MhciPrereqsProgrammingSampleResolverBase {
  constructor(
    protected readonly service: MhciPrereqsProgrammingSampleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "read",
    possession: "any",
  })
  async _mhciPrereqsProgrammingSamplesMeta(
    @graphql.Args() args: MhciPrereqsProgrammingSampleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MhciPrereqsProgrammingSample])
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "read",
    possession: "any",
  })
  async mhciPrereqsProgrammingSamples(
    @graphql.Args() args: MhciPrereqsProgrammingSampleFindManyArgs
  ): Promise<MhciPrereqsProgrammingSample[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MhciPrereqsProgrammingSample, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "read",
    possession: "own",
  })
  async mhciPrereqsProgrammingSample(
    @graphql.Args() args: MhciPrereqsProgrammingSampleFindUniqueArgs
  ): Promise<MhciPrereqsProgrammingSample | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciPrereqsProgrammingSample)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "create",
    possession: "any",
  })
  async createMhciPrereqsProgrammingSample(
    @graphql.Args() args: CreateMhciPrereqsProgrammingSampleArgs
  ): Promise<MhciPrereqsProgrammingSample> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciPrereqsProgrammingSample)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "update",
    possession: "any",
  })
  async updateMhciPrereqsProgrammingSample(
    @graphql.Args() args: UpdateMhciPrereqsProgrammingSampleArgs
  ): Promise<MhciPrereqsProgrammingSample | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereqsProgrammingSample)
  @nestAccessControl.UseRoles({
    resource: "MhciPrereqsProgrammingSample",
    action: "delete",
    possession: "any",
  })
  async deleteMhciPrereqsProgrammingSample(
    @graphql.Args() args: DeleteMhciPrereqsProgrammingSampleArgs
  ): Promise<MhciPrereqsProgrammingSample | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
