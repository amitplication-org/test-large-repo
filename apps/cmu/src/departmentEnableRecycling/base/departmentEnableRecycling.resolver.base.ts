/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDepartmentEnableRecyclingArgs } from "./CreateDepartmentEnableRecyclingArgs";
import { UpdateDepartmentEnableRecyclingArgs } from "./UpdateDepartmentEnableRecyclingArgs";
import { DeleteDepartmentEnableRecyclingArgs } from "./DeleteDepartmentEnableRecyclingArgs";
import { DepartmentEnableRecyclingCountArgs } from "./DepartmentEnableRecyclingCountArgs";
import { DepartmentEnableRecyclingFindManyArgs } from "./DepartmentEnableRecyclingFindManyArgs";
import { DepartmentEnableRecyclingFindUniqueArgs } from "./DepartmentEnableRecyclingFindUniqueArgs";
import { DepartmentEnableRecycling } from "./DepartmentEnableRecycling";
import { DepartmentEnableRecyclingService } from "../departmentEnableRecycling.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DepartmentEnableRecycling)
export class DepartmentEnableRecyclingResolverBase {
  constructor(
    protected readonly service: DepartmentEnableRecyclingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "read",
    possession: "any",
  })
  async _departmentEnableRecyclingsMeta(
    @graphql.Args() args: DepartmentEnableRecyclingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DepartmentEnableRecycling])
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "read",
    possession: "any",
  })
  async departmentEnableRecyclings(
    @graphql.Args() args: DepartmentEnableRecyclingFindManyArgs
  ): Promise<DepartmentEnableRecycling[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DepartmentEnableRecycling, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "read",
    possession: "own",
  })
  async departmentEnableRecycling(
    @graphql.Args() args: DepartmentEnableRecyclingFindUniqueArgs
  ): Promise<DepartmentEnableRecycling | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DepartmentEnableRecycling)
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "create",
    possession: "any",
  })
  async createDepartmentEnableRecycling(
    @graphql.Args() args: CreateDepartmentEnableRecyclingArgs
  ): Promise<DepartmentEnableRecycling> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DepartmentEnableRecycling)
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "update",
    possession: "any",
  })
  async updateDepartmentEnableRecycling(
    @graphql.Args() args: UpdateDepartmentEnableRecyclingArgs
  ): Promise<DepartmentEnableRecycling | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DepartmentEnableRecycling)
  @nestAccessControl.UseRoles({
    resource: "DepartmentEnableRecycling",
    action: "delete",
    possession: "any",
  })
  async deleteDepartmentEnableRecycling(
    @graphql.Args() args: DeleteDepartmentEnableRecyclingArgs
  ): Promise<DepartmentEnableRecycling | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
