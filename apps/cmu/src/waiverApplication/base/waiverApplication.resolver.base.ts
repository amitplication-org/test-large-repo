/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWaiverApplicationArgs } from "./CreateWaiverApplicationArgs";
import { UpdateWaiverApplicationArgs } from "./UpdateWaiverApplicationArgs";
import { DeleteWaiverApplicationArgs } from "./DeleteWaiverApplicationArgs";
import { WaiverApplicationCountArgs } from "./WaiverApplicationCountArgs";
import { WaiverApplicationFindManyArgs } from "./WaiverApplicationFindManyArgs";
import { WaiverApplicationFindUniqueArgs } from "./WaiverApplicationFindUniqueArgs";
import { WaiverApplication } from "./WaiverApplication";
import { WaiverApplicationService } from "../waiverApplication.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WaiverApplication)
export class WaiverApplicationResolverBase {
  constructor(
    protected readonly service: WaiverApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "read",
    possession: "any",
  })
  async _waiverApplicationsMeta(
    @graphql.Args() args: WaiverApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WaiverApplication])
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "read",
    possession: "any",
  })
  async waiverApplications(
    @graphql.Args() args: WaiverApplicationFindManyArgs
  ): Promise<WaiverApplication[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WaiverApplication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "read",
    possession: "own",
  })
  async waiverApplication(
    @graphql.Args() args: WaiverApplicationFindUniqueArgs
  ): Promise<WaiverApplication | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaiverApplication)
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "create",
    possession: "any",
  })
  async createWaiverApplication(
    @graphql.Args() args: CreateWaiverApplicationArgs
  ): Promise<WaiverApplication> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaiverApplication)
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "update",
    possession: "any",
  })
  async updateWaiverApplication(
    @graphql.Args() args: UpdateWaiverApplicationArgs
  ): Promise<WaiverApplication | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WaiverApplication)
  @nestAccessControl.UseRoles({
    resource: "WaiverApplication",
    action: "delete",
    possession: "any",
  })
  async deleteWaiverApplication(
    @graphql.Args() args: DeleteWaiverApplicationArgs
  ): Promise<WaiverApplication | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
