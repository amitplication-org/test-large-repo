/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMultiprogramlockoutArgs } from "./CreateMultiprogramlockoutArgs";
import { UpdateMultiprogramlockoutArgs } from "./UpdateMultiprogramlockoutArgs";
import { DeleteMultiprogramlockoutArgs } from "./DeleteMultiprogramlockoutArgs";
import { MultiprogramlockoutCountArgs } from "./MultiprogramlockoutCountArgs";
import { MultiprogramlockoutFindManyArgs } from "./MultiprogramlockoutFindManyArgs";
import { MultiprogramlockoutFindUniqueArgs } from "./MultiprogramlockoutFindUniqueArgs";
import { Multiprogramlockout } from "./Multiprogramlockout";
import { MultiprogramlockoutService } from "../multiprogramlockout.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Multiprogramlockout)
export class MultiprogramlockoutResolverBase {
  constructor(
    protected readonly service: MultiprogramlockoutService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "read",
    possession: "any",
  })
  async _multiprogramlockoutsMeta(
    @graphql.Args() args: MultiprogramlockoutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Multiprogramlockout])
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "read",
    possession: "any",
  })
  async multiprogramlockouts(
    @graphql.Args() args: MultiprogramlockoutFindManyArgs
  ): Promise<Multiprogramlockout[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Multiprogramlockout, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "read",
    possession: "own",
  })
  async multiprogramlockout(
    @graphql.Args() args: MultiprogramlockoutFindUniqueArgs
  ): Promise<Multiprogramlockout | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Multiprogramlockout)
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "create",
    possession: "any",
  })
  async createMultiprogramlockout(
    @graphql.Args() args: CreateMultiprogramlockoutArgs
  ): Promise<Multiprogramlockout> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Multiprogramlockout)
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "update",
    possession: "any",
  })
  async updateMultiprogramlockout(
    @graphql.Args() args: UpdateMultiprogramlockoutArgs
  ): Promise<Multiprogramlockout | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Multiprogramlockout)
  @nestAccessControl.UseRoles({
    resource: "Multiprogramlockout",
    action: "delete",
    possession: "any",
  })
  async deleteMultiprogramlockout(
    @graphql.Args() args: DeleteMultiprogramlockoutArgs
  ): Promise<Multiprogramlockout | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
