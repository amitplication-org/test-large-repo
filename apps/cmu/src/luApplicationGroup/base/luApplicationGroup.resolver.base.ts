/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLuApplicationGroupArgs } from "./CreateLuApplicationGroupArgs";
import { UpdateLuApplicationGroupArgs } from "./UpdateLuApplicationGroupArgs";
import { DeleteLuApplicationGroupArgs } from "./DeleteLuApplicationGroupArgs";
import { LuApplicationGroupCountArgs } from "./LuApplicationGroupCountArgs";
import { LuApplicationGroupFindManyArgs } from "./LuApplicationGroupFindManyArgs";
import { LuApplicationGroupFindUniqueArgs } from "./LuApplicationGroupFindUniqueArgs";
import { LuApplicationGroup } from "./LuApplicationGroup";
import { LuApplicationGroupService } from "../luApplicationGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LuApplicationGroup)
export class LuApplicationGroupResolverBase {
  constructor(
    protected readonly service: LuApplicationGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "read",
    possession: "any",
  })
  async _luApplicationGroupsMeta(
    @graphql.Args() args: LuApplicationGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LuApplicationGroup])
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "read",
    possession: "any",
  })
  async luApplicationGroups(
    @graphql.Args() args: LuApplicationGroupFindManyArgs
  ): Promise<LuApplicationGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LuApplicationGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "read",
    possession: "own",
  })
  async luApplicationGroup(
    @graphql.Args() args: LuApplicationGroupFindUniqueArgs
  ): Promise<LuApplicationGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationGroup)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "create",
    possession: "any",
  })
  async createLuApplicationGroup(
    @graphql.Args() args: CreateLuApplicationGroupArgs
  ): Promise<LuApplicationGroup> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuApplicationGroup)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "update",
    possession: "any",
  })
  async updateLuApplicationGroup(
    @graphql.Args() args: UpdateLuApplicationGroupArgs
  ): Promise<LuApplicationGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationGroup)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationGroup",
    action: "delete",
    possession: "any",
  })
  async deleteLuApplicationGroup(
    @graphql.Args() args: DeleteLuApplicationGroupArgs
  ): Promise<LuApplicationGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
