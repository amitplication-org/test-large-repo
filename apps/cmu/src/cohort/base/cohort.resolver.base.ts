/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCohortArgs } from "./CreateCohortArgs";
import { UpdateCohortArgs } from "./UpdateCohortArgs";
import { DeleteCohortArgs } from "./DeleteCohortArgs";
import { CohortCountArgs } from "./CohortCountArgs";
import { CohortFindManyArgs } from "./CohortFindManyArgs";
import { CohortFindUniqueArgs } from "./CohortFindUniqueArgs";
import { Cohort } from "./Cohort";
import { CohortService } from "../cohort.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Cohort)
export class CohortResolverBase {
  constructor(
    protected readonly service: CohortService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "read",
    possession: "any",
  })
  async _cohortsMeta(
    @graphql.Args() args: CohortCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Cohort])
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "read",
    possession: "any",
  })
  async cohorts(@graphql.Args() args: CohortFindManyArgs): Promise<Cohort[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Cohort, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "read",
    possession: "own",
  })
  async cohort(
    @graphql.Args() args: CohortFindUniqueArgs
  ): Promise<Cohort | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cohort)
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "create",
    possession: "any",
  })
  async createCohort(@graphql.Args() args: CreateCohortArgs): Promise<Cohort> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cohort)
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "update",
    possession: "any",
  })
  async updateCohort(
    @graphql.Args() args: UpdateCohortArgs
  ): Promise<Cohort | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cohort)
  @nestAccessControl.UseRoles({
    resource: "Cohort",
    action: "delete",
    possession: "any",
  })
  async deleteCohort(
    @graphql.Args() args: DeleteCohortArgs
  ): Promise<Cohort | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
