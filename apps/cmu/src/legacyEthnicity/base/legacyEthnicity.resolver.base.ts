/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLegacyEthnicityArgs } from "./CreateLegacyEthnicityArgs";
import { UpdateLegacyEthnicityArgs } from "./UpdateLegacyEthnicityArgs";
import { DeleteLegacyEthnicityArgs } from "./DeleteLegacyEthnicityArgs";
import { LegacyEthnicityCountArgs } from "./LegacyEthnicityCountArgs";
import { LegacyEthnicityFindManyArgs } from "./LegacyEthnicityFindManyArgs";
import { LegacyEthnicityFindUniqueArgs } from "./LegacyEthnicityFindUniqueArgs";
import { LegacyEthnicity } from "./LegacyEthnicity";
import { LegacyEthnicityService } from "../legacyEthnicity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LegacyEthnicity)
export class LegacyEthnicityResolverBase {
  constructor(
    protected readonly service: LegacyEthnicityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "read",
    possession: "any",
  })
  async _legacyEthnicitiesMeta(
    @graphql.Args() args: LegacyEthnicityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LegacyEthnicity])
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "read",
    possession: "any",
  })
  async legacyEthnicities(
    @graphql.Args() args: LegacyEthnicityFindManyArgs
  ): Promise<LegacyEthnicity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LegacyEthnicity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "read",
    possession: "own",
  })
  async legacyEthnicity(
    @graphql.Args() args: LegacyEthnicityFindUniqueArgs
  ): Promise<LegacyEthnicity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LegacyEthnicity)
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "create",
    possession: "any",
  })
  async createLegacyEthnicity(
    @graphql.Args() args: CreateLegacyEthnicityArgs
  ): Promise<LegacyEthnicity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LegacyEthnicity)
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "update",
    possession: "any",
  })
  async updateLegacyEthnicity(
    @graphql.Args() args: UpdateLegacyEthnicityArgs
  ): Promise<LegacyEthnicity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LegacyEthnicity)
  @nestAccessControl.UseRoles({
    resource: "LegacyEthnicity",
    action: "delete",
    possession: "any",
  })
  async deleteLegacyEthnicity(
    @graphql.Args() args: DeleteLegacyEthnicityArgs
  ): Promise<LegacyEthnicity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
