/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDisabilityArgs } from "./CreateDisabilityArgs";
import { UpdateDisabilityArgs } from "./UpdateDisabilityArgs";
import { DeleteDisabilityArgs } from "./DeleteDisabilityArgs";
import { DisabilityCountArgs } from "./DisabilityCountArgs";
import { DisabilityFindManyArgs } from "./DisabilityFindManyArgs";
import { DisabilityFindUniqueArgs } from "./DisabilityFindUniqueArgs";
import { Disability } from "./Disability";
import { DisabilityService } from "../disability.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Disability)
export class DisabilityResolverBase {
  constructor(
    protected readonly service: DisabilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "read",
    possession: "any",
  })
  async _disabilitiesMeta(
    @graphql.Args() args: DisabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Disability])
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "read",
    possession: "any",
  })
  async disabilities(
    @graphql.Args() args: DisabilityFindManyArgs
  ): Promise<Disability[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Disability, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "read",
    possession: "own",
  })
  async disability(
    @graphql.Args() args: DisabilityFindUniqueArgs
  ): Promise<Disability | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Disability)
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "create",
    possession: "any",
  })
  async createDisability(
    @graphql.Args() args: CreateDisabilityArgs
  ): Promise<Disability> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Disability)
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "update",
    possession: "any",
  })
  async updateDisability(
    @graphql.Args() args: UpdateDisabilityArgs
  ): Promise<Disability | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Disability)
  @nestAccessControl.UseRoles({
    resource: "Disability",
    action: "delete",
    possession: "any",
  })
  async deleteDisability(
    @graphql.Args() args: DeleteDisabilityArgs
  ): Promise<Disability | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
