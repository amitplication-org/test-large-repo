/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScsUserWebisoArgs } from "./CreateScsUserWebisoArgs";
import { UpdateScsUserWebisoArgs } from "./UpdateScsUserWebisoArgs";
import { DeleteScsUserWebisoArgs } from "./DeleteScsUserWebisoArgs";
import { ScsUserWebisoCountArgs } from "./ScsUserWebisoCountArgs";
import { ScsUserWebisoFindManyArgs } from "./ScsUserWebisoFindManyArgs";
import { ScsUserWebisoFindUniqueArgs } from "./ScsUserWebisoFindUniqueArgs";
import { ScsUserWebiso } from "./ScsUserWebiso";
import { ScsUserWebisoService } from "../scsUserWebiso.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScsUserWebiso)
export class ScsUserWebisoResolverBase {
  constructor(
    protected readonly service: ScsUserWebisoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "read",
    possession: "any",
  })
  async _scsUserWebisosMeta(
    @graphql.Args() args: ScsUserWebisoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScsUserWebiso])
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "read",
    possession: "any",
  })
  async scsUserWebisos(
    @graphql.Args() args: ScsUserWebisoFindManyArgs
  ): Promise<ScsUserWebiso[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScsUserWebiso, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "read",
    possession: "own",
  })
  async scsUserWebiso(
    @graphql.Args() args: ScsUserWebisoFindUniqueArgs
  ): Promise<ScsUserWebiso | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScsUserWebiso)
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "create",
    possession: "any",
  })
  async createScsUserWebiso(
    @graphql.Args() args: CreateScsUserWebisoArgs
  ): Promise<ScsUserWebiso> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScsUserWebiso)
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "update",
    possession: "any",
  })
  async updateScsUserWebiso(
    @graphql.Args() args: UpdateScsUserWebisoArgs
  ): Promise<ScsUserWebiso | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScsUserWebiso)
  @nestAccessControl.UseRoles({
    resource: "ScsUserWebiso",
    action: "delete",
    possession: "any",
  })
  async deleteScsUserWebiso(
    @graphql.Args() args: DeleteScsUserWebisoArgs
  ): Promise<ScsUserWebiso | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
