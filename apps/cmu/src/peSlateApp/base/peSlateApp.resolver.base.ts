/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePeSlateAppArgs } from "./CreatePeSlateAppArgs";
import { UpdatePeSlateAppArgs } from "./UpdatePeSlateAppArgs";
import { DeletePeSlateAppArgs } from "./DeletePeSlateAppArgs";
import { PeSlateAppCountArgs } from "./PeSlateAppCountArgs";
import { PeSlateAppFindManyArgs } from "./PeSlateAppFindManyArgs";
import { PeSlateAppFindUniqueArgs } from "./PeSlateAppFindUniqueArgs";
import { PeSlateApp } from "./PeSlateApp";
import { PeSlateAppService } from "../peSlateApp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PeSlateApp)
export class PeSlateAppResolverBase {
  constructor(
    protected readonly service: PeSlateAppService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "read",
    possession: "any",
  })
  async _peSlateAppsMeta(
    @graphql.Args() args: PeSlateAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PeSlateApp])
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "read",
    possession: "any",
  })
  async peSlateApps(
    @graphql.Args() args: PeSlateAppFindManyArgs
  ): Promise<PeSlateApp[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PeSlateApp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "read",
    possession: "own",
  })
  async peSlateApp(
    @graphql.Args() args: PeSlateAppFindUniqueArgs
  ): Promise<PeSlateApp | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeSlateApp)
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "create",
    possession: "any",
  })
  async createPeSlateApp(
    @graphql.Args() args: CreatePeSlateAppArgs
  ): Promise<PeSlateApp> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeSlateApp)
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "update",
    possession: "any",
  })
  async updatePeSlateApp(
    @graphql.Args() args: UpdatePeSlateAppArgs
  ): Promise<PeSlateApp | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeSlateApp)
  @nestAccessControl.UseRoles({
    resource: "PeSlateApp",
    action: "delete",
    possession: "any",
  })
  async deletePeSlateApp(
    @graphql.Args() args: DeletePeSlateAppArgs
  ): Promise<PeSlateApp | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
