/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStudentDecisionUniversityArgs } from "./CreateStudentDecisionUniversityArgs";
import { UpdateStudentDecisionUniversityArgs } from "./UpdateStudentDecisionUniversityArgs";
import { DeleteStudentDecisionUniversityArgs } from "./DeleteStudentDecisionUniversityArgs";
import { StudentDecisionUniversityCountArgs } from "./StudentDecisionUniversityCountArgs";
import { StudentDecisionUniversityFindManyArgs } from "./StudentDecisionUniversityFindManyArgs";
import { StudentDecisionUniversityFindUniqueArgs } from "./StudentDecisionUniversityFindUniqueArgs";
import { StudentDecisionUniversity } from "./StudentDecisionUniversity";
import { StudentDecisionUniversityService } from "../studentDecisionUniversity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StudentDecisionUniversity)
export class StudentDecisionUniversityResolverBase {
  constructor(
    protected readonly service: StudentDecisionUniversityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "read",
    possession: "any",
  })
  async _studentDecisionUniversitiesMeta(
    @graphql.Args() args: StudentDecisionUniversityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StudentDecisionUniversity])
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "read",
    possession: "any",
  })
  async studentDecisionUniversities(
    @graphql.Args() args: StudentDecisionUniversityFindManyArgs
  ): Promise<StudentDecisionUniversity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StudentDecisionUniversity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "read",
    possession: "own",
  })
  async studentDecisionUniversity(
    @graphql.Args() args: StudentDecisionUniversityFindUniqueArgs
  ): Promise<StudentDecisionUniversity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudentDecisionUniversity)
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "create",
    possession: "any",
  })
  async createStudentDecisionUniversity(
    @graphql.Args() args: CreateStudentDecisionUniversityArgs
  ): Promise<StudentDecisionUniversity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudentDecisionUniversity)
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "update",
    possession: "any",
  })
  async updateStudentDecisionUniversity(
    @graphql.Args() args: UpdateStudentDecisionUniversityArgs
  ): Promise<StudentDecisionUniversity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDecisionUniversity)
  @nestAccessControl.UseRoles({
    resource: "StudentDecisionUniversity",
    action: "delete",
    possession: "any",
  })
  async deleteStudentDecisionUniversity(
    @graphql.Args() args: DeleteStudentDecisionUniversityArgs
  ): Promise<StudentDecisionUniversity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
