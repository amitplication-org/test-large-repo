/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePaymentAuditArgs } from "./CreatePaymentAuditArgs";
import { UpdatePaymentAuditArgs } from "./UpdatePaymentAuditArgs";
import { DeletePaymentAuditArgs } from "./DeletePaymentAuditArgs";
import { PaymentAuditCountArgs } from "./PaymentAuditCountArgs";
import { PaymentAuditFindManyArgs } from "./PaymentAuditFindManyArgs";
import { PaymentAuditFindUniqueArgs } from "./PaymentAuditFindUniqueArgs";
import { PaymentAudit } from "./PaymentAudit";
import { PaymentAuditService } from "../paymentAudit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentAudit)
export class PaymentAuditResolverBase {
  constructor(
    protected readonly service: PaymentAuditService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "read",
    possession: "any",
  })
  async _paymentAuditsMeta(
    @graphql.Args() args: PaymentAuditCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentAudit])
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "read",
    possession: "any",
  })
  async paymentAudits(
    @graphql.Args() args: PaymentAuditFindManyArgs
  ): Promise<PaymentAudit[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentAudit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "read",
    possession: "own",
  })
  async paymentAudit(
    @graphql.Args() args: PaymentAuditFindUniqueArgs
  ): Promise<PaymentAudit | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentAudit)
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "create",
    possession: "any",
  })
  async createPaymentAudit(
    @graphql.Args() args: CreatePaymentAuditArgs
  ): Promise<PaymentAudit> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentAudit)
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "update",
    possession: "any",
  })
  async updatePaymentAudit(
    @graphql.Args() args: UpdatePaymentAuditArgs
  ): Promise<PaymentAudit | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentAudit)
  @nestAccessControl.UseRoles({
    resource: "PaymentAudit",
    action: "delete",
    possession: "any",
  })
  async deletePaymentAudit(
    @graphql.Args() args: DeletePaymentAuditArgs
  ): Promise<PaymentAudit | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
