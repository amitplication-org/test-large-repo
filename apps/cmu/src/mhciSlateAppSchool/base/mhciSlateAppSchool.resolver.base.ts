/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMhciSlateAppSchoolArgs } from "./CreateMhciSlateAppSchoolArgs";
import { UpdateMhciSlateAppSchoolArgs } from "./UpdateMhciSlateAppSchoolArgs";
import { DeleteMhciSlateAppSchoolArgs } from "./DeleteMhciSlateAppSchoolArgs";
import { MhciSlateAppSchoolCountArgs } from "./MhciSlateAppSchoolCountArgs";
import { MhciSlateAppSchoolFindManyArgs } from "./MhciSlateAppSchoolFindManyArgs";
import { MhciSlateAppSchoolFindUniqueArgs } from "./MhciSlateAppSchoolFindUniqueArgs";
import { MhciSlateAppSchool } from "./MhciSlateAppSchool";
import { MhciSlateAppSchoolService } from "../mhciSlateAppSchool.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MhciSlateAppSchool)
export class MhciSlateAppSchoolResolverBase {
  constructor(
    protected readonly service: MhciSlateAppSchoolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "read",
    possession: "any",
  })
  async _mhciSlateAppSchoolsMeta(
    @graphql.Args() args: MhciSlateAppSchoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MhciSlateAppSchool])
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "read",
    possession: "any",
  })
  async mhciSlateAppSchools(
    @graphql.Args() args: MhciSlateAppSchoolFindManyArgs
  ): Promise<MhciSlateAppSchool[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MhciSlateAppSchool, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "read",
    possession: "own",
  })
  async mhciSlateAppSchool(
    @graphql.Args() args: MhciSlateAppSchoolFindUniqueArgs
  ): Promise<MhciSlateAppSchool | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateAppSchool)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "create",
    possession: "any",
  })
  async createMhciSlateAppSchool(
    @graphql.Args() args: CreateMhciSlateAppSchoolArgs
  ): Promise<MhciSlateAppSchool> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MhciSlateAppSchool)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "update",
    possession: "any",
  })
  async updateMhciSlateAppSchool(
    @graphql.Args() args: UpdateMhciSlateAppSchoolArgs
  ): Promise<MhciSlateAppSchool | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlateAppSchool)
  @nestAccessControl.UseRoles({
    resource: "MhciSlateAppSchool",
    action: "delete",
    possession: "any",
  })
  async deleteMhciSlateAppSchool(
    @graphql.Args() args: DeleteMhciSlateAppSchoolArgs
  ): Promise<MhciSlateAppSchool | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
