/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMitsSlateRecommendArgs } from "./CreateMitsSlateRecommendArgs";
import { UpdateMitsSlateRecommendArgs } from "./UpdateMitsSlateRecommendArgs";
import { DeleteMitsSlateRecommendArgs } from "./DeleteMitsSlateRecommendArgs";
import { MitsSlateRecommendCountArgs } from "./MitsSlateRecommendCountArgs";
import { MitsSlateRecommendFindManyArgs } from "./MitsSlateRecommendFindManyArgs";
import { MitsSlateRecommendFindUniqueArgs } from "./MitsSlateRecommendFindUniqueArgs";
import { MitsSlateRecommend } from "./MitsSlateRecommend";
import { MitsSlateRecommendService } from "../mitsSlateRecommend.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MitsSlateRecommend)
export class MitsSlateRecommendResolverBase {
  constructor(
    protected readonly service: MitsSlateRecommendService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "read",
    possession: "any",
  })
  async _mitsSlateRecommendsMeta(
    @graphql.Args() args: MitsSlateRecommendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MitsSlateRecommend])
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "read",
    possession: "any",
  })
  async mitsSlateRecommends(
    @graphql.Args() args: MitsSlateRecommendFindManyArgs
  ): Promise<MitsSlateRecommend[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MitsSlateRecommend, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "read",
    possession: "own",
  })
  async mitsSlateRecommend(
    @graphql.Args() args: MitsSlateRecommendFindUniqueArgs
  ): Promise<MitsSlateRecommend | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "create",
    possession: "any",
  })
  async createMitsSlateRecommend(
    @graphql.Args() args: CreateMitsSlateRecommendArgs
  ): Promise<MitsSlateRecommend> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "update",
    possession: "any",
  })
  async updateMitsSlateRecommend(
    @graphql.Args() args: UpdateMitsSlateRecommendArgs
  ): Promise<MitsSlateRecommend | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend",
    action: "delete",
    possession: "any",
  })
  async deleteMitsSlateRecommend(
    @graphql.Args() args: DeleteMitsSlateRecommendArgs
  ): Promise<MitsSlateRecommend | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
