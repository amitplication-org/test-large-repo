/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDietrichSharingArgs } from "./CreateDietrichSharingArgs";
import { UpdateDietrichSharingArgs } from "./UpdateDietrichSharingArgs";
import { DeleteDietrichSharingArgs } from "./DeleteDietrichSharingArgs";
import { DietrichSharingCountArgs } from "./DietrichSharingCountArgs";
import { DietrichSharingFindManyArgs } from "./DietrichSharingFindManyArgs";
import { DietrichSharingFindUniqueArgs } from "./DietrichSharingFindUniqueArgs";
import { DietrichSharing } from "./DietrichSharing";
import { DietrichSharingService } from "../dietrichSharing.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DietrichSharing)
export class DietrichSharingResolverBase {
  constructor(
    protected readonly service: DietrichSharingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "read",
    possession: "any",
  })
  async _dietrichSharingsMeta(
    @graphql.Args() args: DietrichSharingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DietrichSharing])
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "read",
    possession: "any",
  })
  async dietrichSharings(
    @graphql.Args() args: DietrichSharingFindManyArgs
  ): Promise<DietrichSharing[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DietrichSharing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "read",
    possession: "own",
  })
  async dietrichSharing(
    @graphql.Args() args: DietrichSharingFindUniqueArgs
  ): Promise<DietrichSharing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DietrichSharing)
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "create",
    possession: "any",
  })
  async createDietrichSharing(
    @graphql.Args() args: CreateDietrichSharingArgs
  ): Promise<DietrichSharing> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DietrichSharing)
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "update",
    possession: "any",
  })
  async updateDietrichSharing(
    @graphql.Args() args: UpdateDietrichSharingArgs
  ): Promise<DietrichSharing | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DietrichSharing)
  @nestAccessControl.UseRoles({
    resource: "DietrichSharing",
    action: "delete",
    possession: "any",
  })
  async deleteDietrichSharing(
    @graphql.Args() args: DeleteDietrichSharingArgs
  ): Promise<DietrichSharing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
