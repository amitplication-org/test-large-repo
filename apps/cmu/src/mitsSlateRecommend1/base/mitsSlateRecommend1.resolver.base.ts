/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMitsSlateRecommend1Args } from "./CreateMitsSlateRecommend1Args";
import { UpdateMitsSlateRecommend1Args } from "./UpdateMitsSlateRecommend1Args";
import { DeleteMitsSlateRecommend1Args } from "./DeleteMitsSlateRecommend1Args";
import { MitsSlateRecommend1CountArgs } from "./MitsSlateRecommend1CountArgs";
import { MitsSlateRecommend1FindManyArgs } from "./MitsSlateRecommend1FindManyArgs";
import { MitsSlateRecommend1FindUniqueArgs } from "./MitsSlateRecommend1FindUniqueArgs";
import { MitsSlateRecommend1 } from "./MitsSlateRecommend1";
import { MitsSlateRecommend1Service } from "../mitsSlateRecommend1.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MitsSlateRecommend1)
export class MitsSlateRecommend1ResolverBase {
  constructor(
    protected readonly service: MitsSlateRecommend1Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "read",
    possession: "any",
  })
  async _mitsSlateRecommend1sMeta(
    @graphql.Args() args: MitsSlateRecommend1CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MitsSlateRecommend1])
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "read",
    possession: "any",
  })
  async mitsSlateRecommend1s(
    @graphql.Args() args: MitsSlateRecommend1FindManyArgs
  ): Promise<MitsSlateRecommend1[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MitsSlateRecommend1, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "read",
    possession: "own",
  })
  async mitsSlateRecommend1(
    @graphql.Args() args: MitsSlateRecommend1FindUniqueArgs
  ): Promise<MitsSlateRecommend1 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateRecommend1)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "create",
    possession: "any",
  })
  async createMitsSlateRecommend1(
    @graphql.Args() args: CreateMitsSlateRecommend1Args
  ): Promise<MitsSlateRecommend1> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateRecommend1)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "update",
    possession: "any",
  })
  async updateMitsSlateRecommend1(
    @graphql.Args() args: UpdateMitsSlateRecommend1Args
  ): Promise<MitsSlateRecommend1 | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateRecommend1)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateRecommend1",
    action: "delete",
    possession: "any",
  })
  async deleteMitsSlateRecommend1(
    @graphql.Args() args: DeleteMitsSlateRecommend1Args
  ): Promise<MitsSlateRecommend1 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
