/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlatePubArgs } from "./CreateSlatePubArgs";
import { UpdateSlatePubArgs } from "./UpdateSlatePubArgs";
import { DeleteSlatePubArgs } from "./DeleteSlatePubArgs";
import { SlatePubCountArgs } from "./SlatePubCountArgs";
import { SlatePubFindManyArgs } from "./SlatePubFindManyArgs";
import { SlatePubFindUniqueArgs } from "./SlatePubFindUniqueArgs";
import { SlatePub } from "./SlatePub";
import { SlatePubService } from "../slatePub.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlatePub)
export class SlatePubResolverBase {
  constructor(
    protected readonly service: SlatePubService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "read",
    possession: "any",
  })
  async _slatePubsMeta(
    @graphql.Args() args: SlatePubCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlatePub])
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "read",
    possession: "any",
  })
  async slatePubs(
    @graphql.Args() args: SlatePubFindManyArgs
  ): Promise<SlatePub[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlatePub, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "read",
    possession: "own",
  })
  async slatePub(
    @graphql.Args() args: SlatePubFindUniqueArgs
  ): Promise<SlatePub | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlatePub)
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "create",
    possession: "any",
  })
  async createSlatePub(
    @graphql.Args() args: CreateSlatePubArgs
  ): Promise<SlatePub> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlatePub)
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "update",
    possession: "any",
  })
  async updateSlatePub(
    @graphql.Args() args: UpdateSlatePubArgs
  ): Promise<SlatePub | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlatePub)
  @nestAccessControl.UseRoles({
    resource: "SlatePub",
    action: "delete",
    possession: "any",
  })
  async deleteSlatePub(
    @graphql.Args() args: DeleteSlatePubArgs
  ): Promise<SlatePub | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
