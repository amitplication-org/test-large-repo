/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMitsSlateIeltArgs } from "./CreateMitsSlateIeltArgs";
import { UpdateMitsSlateIeltArgs } from "./UpdateMitsSlateIeltArgs";
import { DeleteMitsSlateIeltArgs } from "./DeleteMitsSlateIeltArgs";
import { MitsSlateIeltCountArgs } from "./MitsSlateIeltCountArgs";
import { MitsSlateIeltFindManyArgs } from "./MitsSlateIeltFindManyArgs";
import { MitsSlateIeltFindUniqueArgs } from "./MitsSlateIeltFindUniqueArgs";
import { MitsSlateIelt } from "./MitsSlateIelt";
import { MitsSlateIeltService } from "../mitsSlateIelt.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MitsSlateIelt)
export class MitsSlateIeltResolverBase {
  constructor(
    protected readonly service: MitsSlateIeltService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "read",
    possession: "any",
  })
  async _mitsSlateIeltsMeta(
    @graphql.Args() args: MitsSlateIeltCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MitsSlateIelt])
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "read",
    possession: "any",
  })
  async mitsSlateIelts(
    @graphql.Args() args: MitsSlateIeltFindManyArgs
  ): Promise<MitsSlateIelt[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MitsSlateIelt, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "read",
    possession: "own",
  })
  async mitsSlateIelt(
    @graphql.Args() args: MitsSlateIeltFindUniqueArgs
  ): Promise<MitsSlateIelt | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "create",
    possession: "any",
  })
  async createMitsSlateIelt(
    @graphql.Args() args: CreateMitsSlateIeltArgs
  ): Promise<MitsSlateIelt> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MitsSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "update",
    possession: "any",
  })
  async updateMitsSlateIelt(
    @graphql.Args() args: UpdateMitsSlateIeltArgs
  ): Promise<MitsSlateIelt | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateIelt)
  @nestAccessControl.UseRoles({
    resource: "MitsSlateIelt",
    action: "delete",
    possession: "any",
  })
  async deleteMitsSlateIelt(
    @graphql.Args() args: DeleteMitsSlateIeltArgs
  ): Promise<MitsSlateIelt | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
