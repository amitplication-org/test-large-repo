/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProgramModelService } from "../programModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProgramModelCreateInput } from "./ProgramModelCreateInput";
import { ProgramModelWhereInput } from "./ProgramModelWhereInput";
import { ProgramModelWhereUniqueInput } from "./ProgramModelWhereUniqueInput";
import { ProgramModelFindManyArgs } from "./ProgramModelFindManyArgs";
import { ProgramModelUpdateInput } from "./ProgramModelUpdateInput";
import { ProgramModel } from "./ProgramModel";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { LuApplicationProgramWhereUniqueInput } from "../../luApplicationProgram/base/LuApplicationProgramWhereUniqueInput";
import { ProgramsApplicationreqFindManyArgs } from "../../programsApplicationreq/base/ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreq } from "../../programsApplicationreq/base/ProgramsApplicationreq";
import { ProgramsApplicationreqWhereUniqueInput } from "../../programsApplicationreq/base/ProgramsApplicationreqWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProgramModelControllerBase {
  constructor(
    protected readonly service: ProgramModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramModel })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: ProgramModelCreateInput
  ): Promise<ProgramModel> {
    return await this.service.create({
      data: {
        ...data,

        degree: {
          connect: data.degree,
        },

        fieldsofstudy: {
          connect: data.fieldsofstudy,
        },
      },
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramModel] })
  @ApiNestedQuery(ProgramModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<ProgramModel[]> {
    const args = plainToClass(ProgramModelFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramModel | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() data: ProgramModelUpdateInput
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          degree: {
            connect: data.degree,
          },

          fieldsofstudy: {
            connect: data.fieldsofstudy,
          },
        },
        select: {
          baseprice: true,
          basepriceLate: true,

          degree: {
            select: {
              id: true,
            },
          },

          description: true,
          enabled: true,

          fieldsofstudy: {
            select: {
              id: true,
            },
          },

          id: true,
          linkword: true,
          oraclestring: true,
          prank: true,
          programprice: true,
          programpriceLate: true,
          registrationoraclestring: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          baseprice: true,
          basepriceLate: true,

          degree: {
            select: {
              id: true,
            },
          },

          description: true,
          enabled: true,

          fieldsofstudy: {
            select: {
              id: true,
            },
          },

          id: true,
          linkword: true,
          oraclestring: true,
          prank: true,
          programprice: true,
          programpriceLate: true,
          registrationoraclestring: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/luApplicationPrograms")
  @ApiNestedQuery(LuApplicationProgramFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "any",
  })
  async findManyLuApplicationPrograms(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<LuApplicationProgram[]> {
    const query = plainToClass(LuApplicationProgramFindManyArgs, request.query);
    const results = await this.service.findLuApplicationPrograms(params.id, {
      ...query,
      select: {
        admissionStatus: true,
        admit: true,
        admitComments: true,

        application: {
          select: {
            id: true,
          },
        },

        choice: true,
        decision: true,
        faccontact: true,
        id: true,
        ltichoice: true,

        programs: {
          select: {
            id: true,
          },
        },

        round2: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        stucontact: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async connectLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async updateLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationPrograms")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async disconnectLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/programsApplicationreqs")
  @ApiNestedQuery(ProgramsApplicationreqFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async findManyProgramsApplicationreqs(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramsApplicationreq[]> {
    const query = plainToClass(
      ProgramsApplicationreqFindManyArgs,
      request.query
    );
    const results = await this.service.findProgramsApplicationreqs(params.id, {
      ...query,
      select: {
        applicationreqs: {
          select: {
            id: true,
          },
        },

        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/programsApplicationreqs")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async connectProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/programsApplicationreqs")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async updateProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/programsApplicationreqs")
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async disconnectProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
