/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProgramModelArgs } from "./CreateProgramModelArgs";
import { UpdateProgramModelArgs } from "./UpdateProgramModelArgs";
import { DeleteProgramModelArgs } from "./DeleteProgramModelArgs";
import { ProgramModelCountArgs } from "./ProgramModelCountArgs";
import { ProgramModelFindManyArgs } from "./ProgramModelFindManyArgs";
import { ProgramModelFindUniqueArgs } from "./ProgramModelFindUniqueArgs";
import { ProgramModel } from "./ProgramModel";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { ProgramsApplicationreqFindManyArgs } from "../../programsApplicationreq/base/ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreq } from "../../programsApplicationreq/base/ProgramsApplicationreq";
import { Degree } from "../../degree/base/Degree";
import { Fieldsofstudy } from "../../fieldsofstudy/base/Fieldsofstudy";
import { ProgramModelService } from "../programModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProgramModel)
export class ProgramModelResolverBase {
  constructor(
    protected readonly service: ProgramModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "any",
  })
  async _programModelsMeta(
    @graphql.Args() args: ProgramModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProgramModel])
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "any",
  })
  async programModels(
    @graphql.Args() args: ProgramModelFindManyArgs
  ): Promise<ProgramModel[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProgramModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "read",
    possession: "own",
  })
  async programModel(
    @graphql.Args() args: ProgramModelFindUniqueArgs
  ): Promise<ProgramModel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramModel)
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "create",
    possession: "any",
  })
  async createProgramModel(
    @graphql.Args() args: CreateProgramModelArgs
  ): Promise<ProgramModel> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        degree: {
          connect: args.data.degree,
        },

        fieldsofstudy: {
          connect: args.data.fieldsofstudy,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramModel)
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "update",
    possession: "any",
  })
  async updateProgramModel(
    @graphql.Args() args: UpdateProgramModelArgs
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          degree: {
            connect: args.data.degree,
          },

          fieldsofstudy: {
            connect: args.data.fieldsofstudy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramModel)
  @nestAccessControl.UseRoles({
    resource: "ProgramModel",
    action: "delete",
    possession: "any",
  })
  async deleteProgramModel(
    @graphql.Args() args: DeleteProgramModelArgs
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LuApplicationProgram], {
    name: "luApplicationPrograms",
  })
  @nestAccessControl.UseRoles({
    resource: "LuApplicationProgram",
    action: "read",
    possession: "any",
  })
  async resolveFieldLuApplicationPrograms(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: LuApplicationProgramFindManyArgs
  ): Promise<LuApplicationProgram[]> {
    const results = await this.service.findLuApplicationPrograms(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProgramsApplicationreq], {
    name: "programsApplicationreqs",
  })
  @nestAccessControl.UseRoles({
    resource: "ProgramsApplicationreq",
    action: "read",
    possession: "any",
  })
  async resolveFieldProgramsApplicationreqs(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: ProgramsApplicationreqFindManyArgs
  ): Promise<ProgramsApplicationreq[]> {
    const results = await this.service.findProgramsApplicationreqs(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Degree, {
    nullable: true,
    name: "degree",
  })
  @nestAccessControl.UseRoles({
    resource: "Degree",
    action: "read",
    possession: "any",
  })
  async resolveFieldDegree(
    @graphql.Parent() parent: ProgramModel
  ): Promise<Degree | null> {
    const result = await this.service.getDegree(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Fieldsofstudy, {
    nullable: true,
    name: "fieldsofstudy",
  })
  @nestAccessControl.UseRoles({
    resource: "Fieldsofstudy",
    action: "read",
    possession: "any",
  })
  async resolveFieldFieldsofstudy(
    @graphql.Parent() parent: ProgramModel
  ): Promise<Fieldsofstudy | null> {
    const result = await this.service.getFieldsofstudy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
