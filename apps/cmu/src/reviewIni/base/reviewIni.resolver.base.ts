/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReviewIniArgs } from "./CreateReviewIniArgs";
import { UpdateReviewIniArgs } from "./UpdateReviewIniArgs";
import { DeleteReviewIniArgs } from "./DeleteReviewIniArgs";
import { ReviewIniCountArgs } from "./ReviewIniCountArgs";
import { ReviewIniFindManyArgs } from "./ReviewIniFindManyArgs";
import { ReviewIniFindUniqueArgs } from "./ReviewIniFindUniqueArgs";
import { ReviewIni } from "./ReviewIni";
import { ReviewIniService } from "../reviewIni.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewIni)
export class ReviewIniResolverBase {
  constructor(
    protected readonly service: ReviewIniService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "read",
    possession: "any",
  })
  async _reviewInisMeta(
    @graphql.Args() args: ReviewIniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewIni])
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "read",
    possession: "any",
  })
  async reviewInis(
    @graphql.Args() args: ReviewIniFindManyArgs
  ): Promise<ReviewIni[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewIni, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "read",
    possession: "own",
  })
  async reviewIni(
    @graphql.Args() args: ReviewIniFindUniqueArgs
  ): Promise<ReviewIni | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewIni)
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "create",
    possession: "any",
  })
  async createReviewIni(
    @graphql.Args() args: CreateReviewIniArgs
  ): Promise<ReviewIni> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewIni)
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "update",
    possession: "any",
  })
  async updateReviewIni(
    @graphql.Args() args: UpdateReviewIniArgs
  ): Promise<ReviewIni | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewIni)
  @nestAccessControl.UseRoles({
    resource: "ReviewIni",
    action: "delete",
    possession: "any",
  })
  async deleteReviewIni(
    @graphql.Args() args: DeleteReviewIniArgs
  ): Promise<ReviewIni | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
