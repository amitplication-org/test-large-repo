/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateRecommendArgs } from "./CreateSlateRecommendArgs";
import { UpdateSlateRecommendArgs } from "./UpdateSlateRecommendArgs";
import { DeleteSlateRecommendArgs } from "./DeleteSlateRecommendArgs";
import { SlateRecommendCountArgs } from "./SlateRecommendCountArgs";
import { SlateRecommendFindManyArgs } from "./SlateRecommendFindManyArgs";
import { SlateRecommendFindUniqueArgs } from "./SlateRecommendFindUniqueArgs";
import { SlateRecommend } from "./SlateRecommend";
import { SlateRecommendService } from "../slateRecommend.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateRecommend)
export class SlateRecommendResolverBase {
  constructor(
    protected readonly service: SlateRecommendService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "read",
    possession: "any",
  })
  async _slateRecommendsMeta(
    @graphql.Args() args: SlateRecommendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateRecommend])
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "read",
    possession: "any",
  })
  async slateRecommends(
    @graphql.Args() args: SlateRecommendFindManyArgs
  ): Promise<SlateRecommend[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateRecommend, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "read",
    possession: "own",
  })
  async slateRecommend(
    @graphql.Args() args: SlateRecommendFindUniqueArgs
  ): Promise<SlateRecommend | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "create",
    possession: "any",
  })
  async createSlateRecommend(
    @graphql.Args() args: CreateSlateRecommendArgs
  ): Promise<SlateRecommend> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "update",
    possession: "any",
  })
  async updateSlateRecommend(
    @graphql.Args() args: UpdateSlateRecommendArgs
  ): Promise<SlateRecommend | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateRecommend)
  @nestAccessControl.UseRoles({
    resource: "SlateRecommend",
    action: "delete",
    possession: "any",
  })
  async deleteSlateRecommend(
    @graphql.Args() args: DeleteSlateRecommendArgs
  ): Promise<SlateRecommend | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
