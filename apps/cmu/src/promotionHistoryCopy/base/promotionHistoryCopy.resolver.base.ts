/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePromotionHistoryCopyArgs } from "./CreatePromotionHistoryCopyArgs";
import { UpdatePromotionHistoryCopyArgs } from "./UpdatePromotionHistoryCopyArgs";
import { DeletePromotionHistoryCopyArgs } from "./DeletePromotionHistoryCopyArgs";
import { PromotionHistoryCopyCountArgs } from "./PromotionHistoryCopyCountArgs";
import { PromotionHistoryCopyFindManyArgs } from "./PromotionHistoryCopyFindManyArgs";
import { PromotionHistoryCopyFindUniqueArgs } from "./PromotionHistoryCopyFindUniqueArgs";
import { PromotionHistoryCopy } from "./PromotionHistoryCopy";
import { PromotionHistoryCopyService } from "../promotionHistoryCopy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PromotionHistoryCopy)
export class PromotionHistoryCopyResolverBase {
  constructor(
    protected readonly service: PromotionHistoryCopyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "read",
    possession: "any",
  })
  async _promotionHistoryCopiesMeta(
    @graphql.Args() args: PromotionHistoryCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PromotionHistoryCopy])
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "read",
    possession: "any",
  })
  async promotionHistoryCopies(
    @graphql.Args() args: PromotionHistoryCopyFindManyArgs
  ): Promise<PromotionHistoryCopy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PromotionHistoryCopy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "read",
    possession: "own",
  })
  async promotionHistoryCopy(
    @graphql.Args() args: PromotionHistoryCopyFindUniqueArgs
  ): Promise<PromotionHistoryCopy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PromotionHistoryCopy)
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "create",
    possession: "any",
  })
  async createPromotionHistoryCopy(
    @graphql.Args() args: CreatePromotionHistoryCopyArgs
  ): Promise<PromotionHistoryCopy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PromotionHistoryCopy)
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "update",
    possession: "any",
  })
  async updatePromotionHistoryCopy(
    @graphql.Args() args: UpdatePromotionHistoryCopyArgs
  ): Promise<PromotionHistoryCopy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PromotionHistoryCopy)
  @nestAccessControl.UseRoles({
    resource: "PromotionHistoryCopy",
    action: "delete",
    possession: "any",
  })
  async deletePromotionHistoryCopy(
    @graphql.Args() args: DeletePromotionHistoryCopyArgs
  ): Promise<PromotionHistoryCopy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
