/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDuolingoDataCopyArgs } from "./CreateDuolingoDataCopyArgs";
import { UpdateDuolingoDataCopyArgs } from "./UpdateDuolingoDataCopyArgs";
import { DeleteDuolingoDataCopyArgs } from "./DeleteDuolingoDataCopyArgs";
import { DuolingoDataCopyCountArgs } from "./DuolingoDataCopyCountArgs";
import { DuolingoDataCopyFindManyArgs } from "./DuolingoDataCopyFindManyArgs";
import { DuolingoDataCopyFindUniqueArgs } from "./DuolingoDataCopyFindUniqueArgs";
import { DuolingoDataCopy } from "./DuolingoDataCopy";
import { DuolingoDataCopyService } from "../duolingoDataCopy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DuolingoDataCopy)
export class DuolingoDataCopyResolverBase {
  constructor(
    protected readonly service: DuolingoDataCopyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "read",
    possession: "any",
  })
  async _duolingoDataCopiesMeta(
    @graphql.Args() args: DuolingoDataCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DuolingoDataCopy])
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "read",
    possession: "any",
  })
  async duolingoDataCopies(
    @graphql.Args() args: DuolingoDataCopyFindManyArgs
  ): Promise<DuolingoDataCopy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DuolingoDataCopy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "read",
    possession: "own",
  })
  async duolingoDataCopy(
    @graphql.Args() args: DuolingoDataCopyFindUniqueArgs
  ): Promise<DuolingoDataCopy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DuolingoDataCopy)
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "create",
    possession: "any",
  })
  async createDuolingoDataCopy(
    @graphql.Args() args: CreateDuolingoDataCopyArgs
  ): Promise<DuolingoDataCopy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DuolingoDataCopy)
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "update",
    possession: "any",
  })
  async updateDuolingoDataCopy(
    @graphql.Args() args: UpdateDuolingoDataCopyArgs
  ): Promise<DuolingoDataCopy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DuolingoDataCopy)
  @nestAccessControl.UseRoles({
    resource: "DuolingoDataCopy",
    action: "delete",
    possession: "any",
  })
  async deleteDuolingoDataCopy(
    @graphql.Args() args: DeleteDuolingoDataCopyArgs
  ): Promise<DuolingoDataCopy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
