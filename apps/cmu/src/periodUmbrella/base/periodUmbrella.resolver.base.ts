/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePeriodUmbrellaArgs } from "./CreatePeriodUmbrellaArgs";
import { UpdatePeriodUmbrellaArgs } from "./UpdatePeriodUmbrellaArgs";
import { DeletePeriodUmbrellaArgs } from "./DeletePeriodUmbrellaArgs";
import { PeriodUmbrellaCountArgs } from "./PeriodUmbrellaCountArgs";
import { PeriodUmbrellaFindManyArgs } from "./PeriodUmbrellaFindManyArgs";
import { PeriodUmbrellaFindUniqueArgs } from "./PeriodUmbrellaFindUniqueArgs";
import { PeriodUmbrella } from "./PeriodUmbrella";
import { PeriodUmbrellaService } from "../periodUmbrella.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PeriodUmbrella)
export class PeriodUmbrellaResolverBase {
  constructor(
    protected readonly service: PeriodUmbrellaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "read",
    possession: "any",
  })
  async _periodUmbrellasMeta(
    @graphql.Args() args: PeriodUmbrellaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PeriodUmbrella])
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "read",
    possession: "any",
  })
  async periodUmbrellas(
    @graphql.Args() args: PeriodUmbrellaFindManyArgs
  ): Promise<PeriodUmbrella[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PeriodUmbrella, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "read",
    possession: "own",
  })
  async periodUmbrella(
    @graphql.Args() args: PeriodUmbrellaFindUniqueArgs
  ): Promise<PeriodUmbrella | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodUmbrella)
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "create",
    possession: "any",
  })
  async createPeriodUmbrella(
    @graphql.Args() args: CreatePeriodUmbrellaArgs
  ): Promise<PeriodUmbrella> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodUmbrella)
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "update",
    possession: "any",
  })
  async updatePeriodUmbrella(
    @graphql.Args() args: UpdatePeriodUmbrellaArgs
  ): Promise<PeriodUmbrella | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeriodUmbrella)
  @nestAccessControl.UseRoles({
    resource: "PeriodUmbrella",
    action: "delete",
    possession: "any",
  })
  async deletePeriodUmbrella(
    @graphql.Args() args: DeletePeriodUmbrellaArgs
  ): Promise<PeriodUmbrella | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
