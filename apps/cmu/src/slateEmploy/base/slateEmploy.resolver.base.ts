/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSlateEmployArgs } from "./CreateSlateEmployArgs";
import { UpdateSlateEmployArgs } from "./UpdateSlateEmployArgs";
import { DeleteSlateEmployArgs } from "./DeleteSlateEmployArgs";
import { SlateEmployCountArgs } from "./SlateEmployCountArgs";
import { SlateEmployFindManyArgs } from "./SlateEmployFindManyArgs";
import { SlateEmployFindUniqueArgs } from "./SlateEmployFindUniqueArgs";
import { SlateEmploy } from "./SlateEmploy";
import { SlateEmployService } from "../slateEmploy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SlateEmploy)
export class SlateEmployResolverBase {
  constructor(
    protected readonly service: SlateEmployService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "read",
    possession: "any",
  })
  async _slateEmploysMeta(
    @graphql.Args() args: SlateEmployCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SlateEmploy])
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "read",
    possession: "any",
  })
  async slateEmploys(
    @graphql.Args() args: SlateEmployFindManyArgs
  ): Promise<SlateEmploy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SlateEmploy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "read",
    possession: "own",
  })
  async slateEmploy(
    @graphql.Args() args: SlateEmployFindUniqueArgs
  ): Promise<SlateEmploy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateEmploy)
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "create",
    possession: "any",
  })
  async createSlateEmploy(
    @graphql.Args() args: CreateSlateEmployArgs
  ): Promise<SlateEmploy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SlateEmploy)
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "update",
    possession: "any",
  })
  async updateSlateEmploy(
    @graphql.Args() args: UpdateSlateEmployArgs
  ): Promise<SlateEmploy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateEmploy)
  @nestAccessControl.UseRoles({
    resource: "SlateEmploy",
    action: "delete",
    possession: "any",
  })
  async deleteSlateEmploy(
    @graphql.Args() args: DeleteSlateEmployArgs
  ): Promise<SlateEmploy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
