/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGrescoreMscsWaiverArgs } from "./CreateGrescoreMscsWaiverArgs";
import { UpdateGrescoreMscsWaiverArgs } from "./UpdateGrescoreMscsWaiverArgs";
import { DeleteGrescoreMscsWaiverArgs } from "./DeleteGrescoreMscsWaiverArgs";
import { GrescoreMscsWaiverCountArgs } from "./GrescoreMscsWaiverCountArgs";
import { GrescoreMscsWaiverFindManyArgs } from "./GrescoreMscsWaiverFindManyArgs";
import { GrescoreMscsWaiverFindUniqueArgs } from "./GrescoreMscsWaiverFindUniqueArgs";
import { GrescoreMscsWaiver } from "./GrescoreMscsWaiver";
import { GrescoreMscsWaiverService } from "../grescoreMscsWaiver.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GrescoreMscsWaiver)
export class GrescoreMscsWaiverResolverBase {
  constructor(
    protected readonly service: GrescoreMscsWaiverService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "read",
    possession: "any",
  })
  async _grescoreMscsWaiversMeta(
    @graphql.Args() args: GrescoreMscsWaiverCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GrescoreMscsWaiver])
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "read",
    possession: "any",
  })
  async grescoreMscsWaivers(
    @graphql.Args() args: GrescoreMscsWaiverFindManyArgs
  ): Promise<GrescoreMscsWaiver[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GrescoreMscsWaiver, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "read",
    possession: "own",
  })
  async grescoreMscsWaiver(
    @graphql.Args() args: GrescoreMscsWaiverFindUniqueArgs
  ): Promise<GrescoreMscsWaiver | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GrescoreMscsWaiver)
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "create",
    possession: "any",
  })
  async createGrescoreMscsWaiver(
    @graphql.Args() args: CreateGrescoreMscsWaiverArgs
  ): Promise<GrescoreMscsWaiver> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GrescoreMscsWaiver)
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "update",
    possession: "any",
  })
  async updateGrescoreMscsWaiver(
    @graphql.Args() args: UpdateGrescoreMscsWaiverArgs
  ): Promise<GrescoreMscsWaiver | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GrescoreMscsWaiver)
  @nestAccessControl.UseRoles({
    resource: "GrescoreMscsWaiver",
    action: "delete",
    possession: "any",
  })
  async deleteGrescoreMscsWaiver(
    @graphql.Args() args: DeleteGrescoreMscsWaiverArgs
  ): Promise<GrescoreMscsWaiver | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
