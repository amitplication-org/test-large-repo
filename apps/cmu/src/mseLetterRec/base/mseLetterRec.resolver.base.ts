/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMseLetterRecArgs } from "./CreateMseLetterRecArgs";
import { UpdateMseLetterRecArgs } from "./UpdateMseLetterRecArgs";
import { DeleteMseLetterRecArgs } from "./DeleteMseLetterRecArgs";
import { MseLetterRecCountArgs } from "./MseLetterRecCountArgs";
import { MseLetterRecFindManyArgs } from "./MseLetterRecFindManyArgs";
import { MseLetterRecFindUniqueArgs } from "./MseLetterRecFindUniqueArgs";
import { MseLetterRec } from "./MseLetterRec";
import { MseLetterRecService } from "../mseLetterRec.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MseLetterRec)
export class MseLetterRecResolverBase {
  constructor(
    protected readonly service: MseLetterRecService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "read",
    possession: "any",
  })
  async _mseLetterRecsMeta(
    @graphql.Args() args: MseLetterRecCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MseLetterRec])
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "read",
    possession: "any",
  })
  async mseLetterRecs(
    @graphql.Args() args: MseLetterRecFindManyArgs
  ): Promise<MseLetterRec[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MseLetterRec, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "read",
    possession: "own",
  })
  async mseLetterRec(
    @graphql.Args() args: MseLetterRecFindUniqueArgs
  ): Promise<MseLetterRec | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseLetterRec)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "create",
    possession: "any",
  })
  async createMseLetterRec(
    @graphql.Args() args: CreateMseLetterRecArgs
  ): Promise<MseLetterRec> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MseLetterRec)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "update",
    possession: "any",
  })
  async updateMseLetterRec(
    @graphql.Args() args: UpdateMseLetterRecArgs
  ): Promise<MseLetterRec | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseLetterRec)
  @nestAccessControl.UseRoles({
    resource: "MseLetterRec",
    action: "delete",
    possession: "any",
  })
  async deleteMseLetterRec(
    @graphql.Args() args: DeleteMseLetterRecArgs
  ): Promise<MseLetterRec | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
