/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUsersinstArgs } from "./CreateUsersinstArgs";
import { UpdateUsersinstArgs } from "./UpdateUsersinstArgs";
import { DeleteUsersinstArgs } from "./DeleteUsersinstArgs";
import { UsersinstCountArgs } from "./UsersinstCountArgs";
import { UsersinstFindManyArgs } from "./UsersinstFindManyArgs";
import { UsersinstFindUniqueArgs } from "./UsersinstFindUniqueArgs";
import { Usersinst } from "./Usersinst";
import { UsersinstService } from "../usersinst.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Usersinst)
export class UsersinstResolverBase {
  constructor(
    protected readonly service: UsersinstService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "read",
    possession: "any",
  })
  async _usersinstsMeta(
    @graphql.Args() args: UsersinstCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Usersinst])
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "read",
    possession: "any",
  })
  async usersinsts(
    @graphql.Args() args: UsersinstFindManyArgs
  ): Promise<Usersinst[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Usersinst, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "read",
    possession: "own",
  })
  async usersinst(
    @graphql.Args() args: UsersinstFindUniqueArgs
  ): Promise<Usersinst | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usersinst)
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "create",
    possession: "any",
  })
  async createUsersinst(
    @graphql.Args() args: CreateUsersinstArgs
  ): Promise<Usersinst> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usersinst)
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "update",
    possession: "any",
  })
  async updateUsersinst(
    @graphql.Args() args: UpdateUsersinstArgs
  ): Promise<Usersinst | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Usersinst)
  @nestAccessControl.UseRoles({
    resource: "Usersinst",
    action: "delete",
    possession: "any",
  })
  async deleteUsersinst(
    @graphql.Args() args: DeleteUsersinstArgs
  ): Promise<Usersinst | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
