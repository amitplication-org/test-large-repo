/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProgramGroupProgramArgs } from "./CreateProgramGroupProgramArgs";
import { UpdateProgramGroupProgramArgs } from "./UpdateProgramGroupProgramArgs";
import { DeleteProgramGroupProgramArgs } from "./DeleteProgramGroupProgramArgs";
import { ProgramGroupProgramCountArgs } from "./ProgramGroupProgramCountArgs";
import { ProgramGroupProgramFindManyArgs } from "./ProgramGroupProgramFindManyArgs";
import { ProgramGroupProgramFindUniqueArgs } from "./ProgramGroupProgramFindUniqueArgs";
import { ProgramGroupProgram } from "./ProgramGroupProgram";
import { ProgramGroupProgramService } from "../programGroupProgram.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProgramGroupProgram)
export class ProgramGroupProgramResolverBase {
  constructor(
    protected readonly service: ProgramGroupProgramService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "read",
    possession: "any",
  })
  async _programGroupProgramsMeta(
    @graphql.Args() args: ProgramGroupProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProgramGroupProgram])
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "read",
    possession: "any",
  })
  async programGroupPrograms(
    @graphql.Args() args: ProgramGroupProgramFindManyArgs
  ): Promise<ProgramGroupProgram[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProgramGroupProgram, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "read",
    possession: "own",
  })
  async programGroupProgram(
    @graphql.Args() args: ProgramGroupProgramFindUniqueArgs
  ): Promise<ProgramGroupProgram | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramGroupProgram)
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "create",
    possession: "any",
  })
  async createProgramGroupProgram(
    @graphql.Args() args: CreateProgramGroupProgramArgs
  ): Promise<ProgramGroupProgram> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProgramGroupProgram)
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "update",
    possession: "any",
  })
  async updateProgramGroupProgram(
    @graphql.Args() args: UpdateProgramGroupProgramArgs
  ): Promise<ProgramGroupProgram | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramGroupProgram)
  @nestAccessControl.UseRoles({
    resource: "ProgramGroupProgram",
    action: "delete",
    possession: "any",
  })
  async deleteProgramGroupProgram(
    @graphql.Args() args: DeleteProgramGroupProgramArgs
  ): Promise<ProgramGroupProgram | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
