/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIniFinancialSupportArgs } from "./CreateIniFinancialSupportArgs";
import { UpdateIniFinancialSupportArgs } from "./UpdateIniFinancialSupportArgs";
import { DeleteIniFinancialSupportArgs } from "./DeleteIniFinancialSupportArgs";
import { IniFinancialSupportCountArgs } from "./IniFinancialSupportCountArgs";
import { IniFinancialSupportFindManyArgs } from "./IniFinancialSupportFindManyArgs";
import { IniFinancialSupportFindUniqueArgs } from "./IniFinancialSupportFindUniqueArgs";
import { IniFinancialSupport } from "./IniFinancialSupport";
import { IniFinancialSupportService } from "../iniFinancialSupport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IniFinancialSupport)
export class IniFinancialSupportResolverBase {
  constructor(
    protected readonly service: IniFinancialSupportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "read",
    possession: "any",
  })
  async _iniFinancialSupportsMeta(
    @graphql.Args() args: IniFinancialSupportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IniFinancialSupport])
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "read",
    possession: "any",
  })
  async iniFinancialSupports(
    @graphql.Args() args: IniFinancialSupportFindManyArgs
  ): Promise<IniFinancialSupport[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IniFinancialSupport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "read",
    possession: "own",
  })
  async iniFinancialSupport(
    @graphql.Args() args: IniFinancialSupportFindUniqueArgs
  ): Promise<IniFinancialSupport | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IniFinancialSupport)
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "create",
    possession: "any",
  })
  async createIniFinancialSupport(
    @graphql.Args() args: CreateIniFinancialSupportArgs
  ): Promise<IniFinancialSupport> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IniFinancialSupport)
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "update",
    possession: "any",
  })
  async updateIniFinancialSupport(
    @graphql.Args() args: UpdateIniFinancialSupportArgs
  ): Promise<IniFinancialSupport | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IniFinancialSupport)
  @nestAccessControl.UseRoles({
    resource: "IniFinancialSupport",
    action: "delete",
    possession: "any",
  })
  async deleteIniFinancialSupport(
    @graphql.Args() args: DeleteIniFinancialSupportArgs
  ): Promise<IniFinancialSupport | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
