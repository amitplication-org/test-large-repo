/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePeriodTypeArgs } from "./CreatePeriodTypeArgs";
import { UpdatePeriodTypeArgs } from "./UpdatePeriodTypeArgs";
import { DeletePeriodTypeArgs } from "./DeletePeriodTypeArgs";
import { PeriodTypeCountArgs } from "./PeriodTypeCountArgs";
import { PeriodTypeFindManyArgs } from "./PeriodTypeFindManyArgs";
import { PeriodTypeFindUniqueArgs } from "./PeriodTypeFindUniqueArgs";
import { PeriodType } from "./PeriodType";
import { PeriodTypeService } from "../periodType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PeriodType)
export class PeriodTypeResolverBase {
  constructor(
    protected readonly service: PeriodTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "read",
    possession: "any",
  })
  async _periodTypesMeta(
    @graphql.Args() args: PeriodTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PeriodType])
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "read",
    possession: "any",
  })
  async periodTypes(
    @graphql.Args() args: PeriodTypeFindManyArgs
  ): Promise<PeriodType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PeriodType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "read",
    possession: "own",
  })
  async periodType(
    @graphql.Args() args: PeriodTypeFindUniqueArgs
  ): Promise<PeriodType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodType)
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "create",
    possession: "any",
  })
  async createPeriodType(
    @graphql.Args() args: CreatePeriodTypeArgs
  ): Promise<PeriodType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodType)
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "update",
    possession: "any",
  })
  async updatePeriodType(
    @graphql.Args() args: UpdatePeriodTypeArgs
  ): Promise<PeriodType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeriodType)
  @nestAccessControl.UseRoles({
    resource: "PeriodType",
    action: "delete",
    possession: "any",
  })
  async deletePeriodType(
    @graphql.Args() args: DeletePeriodTypeArgs
  ): Promise<PeriodType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
