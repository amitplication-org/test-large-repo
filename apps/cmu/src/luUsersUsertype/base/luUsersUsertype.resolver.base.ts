/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLuUsersUsertypeArgs } from "./CreateLuUsersUsertypeArgs";
import { UpdateLuUsersUsertypeArgs } from "./UpdateLuUsersUsertypeArgs";
import { DeleteLuUsersUsertypeArgs } from "./DeleteLuUsersUsertypeArgs";
import { LuUsersUsertypeCountArgs } from "./LuUsersUsertypeCountArgs";
import { LuUsersUsertypeFindManyArgs } from "./LuUsersUsertypeFindManyArgs";
import { LuUsersUsertypeFindUniqueArgs } from "./LuUsersUsertypeFindUniqueArgs";
import { LuUsersUsertype } from "./LuUsersUsertype";
import { UserModel } from "../../userModel/base/UserModel";
import { LuUsersUsertypeService } from "../luUsersUsertype.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LuUsersUsertype)
export class LuUsersUsertypeResolverBase {
  constructor(
    protected readonly service: LuUsersUsertypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "read",
    possession: "any",
  })
  async _luUsersUsertypesMeta(
    @graphql.Args() args: LuUsersUsertypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LuUsersUsertype])
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "read",
    possession: "any",
  })
  async luUsersUsertypes(
    @graphql.Args() args: LuUsersUsertypeFindManyArgs
  ): Promise<LuUsersUsertype[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LuUsersUsertype, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "read",
    possession: "own",
  })
  async luUsersUsertype(
    @graphql.Args() args: LuUsersUsertypeFindUniqueArgs
  ): Promise<LuUsersUsertype | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuUsersUsertype)
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "create",
    possession: "any",
  })
  async createLuUsersUsertype(
    @graphql.Args() args: CreateLuUsersUsertypeArgs
  ): Promise<LuUsersUsertype> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LuUsersUsertype)
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "update",
    possession: "any",
  })
  async updateLuUsersUsertype(
    @graphql.Args() args: UpdateLuUsersUsertypeArgs
  ): Promise<LuUsersUsertype | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuUsersUsertype)
  @nestAccessControl.UseRoles({
    resource: "LuUsersUsertype",
    action: "delete",
    possession: "any",
  })
  async deleteLuUsersUsertype(
    @graphql.Args() args: DeleteLuUsersUsertypeArgs
  ): Promise<LuUsersUsertype | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserModel, {
    nullable: true,
    name: "users",
  })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: LuUsersUsertype
  ): Promise<UserModel | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
