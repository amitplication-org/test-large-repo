/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBfDepartmentArgs } from "./CreateBfDepartmentArgs";
import { UpdateBfDepartmentArgs } from "./UpdateBfDepartmentArgs";
import { DeleteBfDepartmentArgs } from "./DeleteBfDepartmentArgs";
import { BfDepartmentCountArgs } from "./BfDepartmentCountArgs";
import { BfDepartmentFindManyArgs } from "./BfDepartmentFindManyArgs";
import { BfDepartmentFindUniqueArgs } from "./BfDepartmentFindUniqueArgs";
import { BfDepartment } from "./BfDepartment";
import { BfDepartmentService } from "../bfDepartment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BfDepartment)
export class BfDepartmentResolverBase {
  constructor(
    protected readonly service: BfDepartmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "read",
    possession: "any",
  })
  async _bfDepartmentsMeta(
    @graphql.Args() args: BfDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BfDepartment])
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "read",
    possession: "any",
  })
  async bfDepartments(
    @graphql.Args() args: BfDepartmentFindManyArgs
  ): Promise<BfDepartment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BfDepartment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "read",
    possession: "own",
  })
  async bfDepartment(
    @graphql.Args() args: BfDepartmentFindUniqueArgs
  ): Promise<BfDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BfDepartment)
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "create",
    possession: "any",
  })
  async createBfDepartment(
    @graphql.Args() args: CreateBfDepartmentArgs
  ): Promise<BfDepartment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BfDepartment)
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "update",
    possession: "any",
  })
  async updateBfDepartment(
    @graphql.Args() args: UpdateBfDepartmentArgs
  ): Promise<BfDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BfDepartment)
  @nestAccessControl.UseRoles({
    resource: "BfDepartment",
    action: "delete",
    possession: "any",
  })
  async deleteBfDepartment(
    @graphql.Args() args: DeleteBfDepartmentArgs
  ): Promise<BfDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
