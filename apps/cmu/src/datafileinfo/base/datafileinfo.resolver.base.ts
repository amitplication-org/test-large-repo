/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDatafileinfoArgs } from "./CreateDatafileinfoArgs";
import { UpdateDatafileinfoArgs } from "./UpdateDatafileinfoArgs";
import { DeleteDatafileinfoArgs } from "./DeleteDatafileinfoArgs";
import { DatafileinfoCountArgs } from "./DatafileinfoCountArgs";
import { DatafileinfoFindManyArgs } from "./DatafileinfoFindManyArgs";
import { DatafileinfoFindUniqueArgs } from "./DatafileinfoFindUniqueArgs";
import { Datafileinfo } from "./Datafileinfo";
import { DatafileinfoService } from "../datafileinfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Datafileinfo)
export class DatafileinfoResolverBase {
  constructor(
    protected readonly service: DatafileinfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "read",
    possession: "any",
  })
  async _datafileinfosMeta(
    @graphql.Args() args: DatafileinfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Datafileinfo])
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "read",
    possession: "any",
  })
  async datafileinfos(
    @graphql.Args() args: DatafileinfoFindManyArgs
  ): Promise<Datafileinfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Datafileinfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "read",
    possession: "own",
  })
  async datafileinfo(
    @graphql.Args() args: DatafileinfoFindUniqueArgs
  ): Promise<Datafileinfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Datafileinfo)
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "create",
    possession: "any",
  })
  async createDatafileinfo(
    @graphql.Args() args: CreateDatafileinfoArgs
  ): Promise<Datafileinfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Datafileinfo)
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "update",
    possession: "any",
  })
  async updateDatafileinfo(
    @graphql.Args() args: UpdateDatafileinfoArgs
  ): Promise<Datafileinfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Datafileinfo)
  @nestAccessControl.UseRoles({
    resource: "Datafileinfo",
    action: "delete",
    possession: "any",
  })
  async deleteDatafileinfo(
    @graphql.Args() args: DeleteDatafileinfoArgs
  ): Promise<Datafileinfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
