/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUsersInfoArgs } from "./CreateUsersInfoArgs";
import { UpdateUsersInfoArgs } from "./UpdateUsersInfoArgs";
import { DeleteUsersInfoArgs } from "./DeleteUsersInfoArgs";
import { UsersInfoCountArgs } from "./UsersInfoCountArgs";
import { UsersInfoFindManyArgs } from "./UsersInfoFindManyArgs";
import { UsersInfoFindUniqueArgs } from "./UsersInfoFindUniqueArgs";
import { UsersInfo } from "./UsersInfo";
import { UsersInfoService } from "../usersInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UsersInfo)
export class UsersInfoResolverBase {
  constructor(
    protected readonly service: UsersInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "read",
    possession: "any",
  })
  async _usersInfosMeta(
    @graphql.Args() args: UsersInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UsersInfo])
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "read",
    possession: "any",
  })
  async usersInfos(
    @graphql.Args() args: UsersInfoFindManyArgs
  ): Promise<UsersInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UsersInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "read",
    possession: "own",
  })
  async usersInfo(
    @graphql.Args() args: UsersInfoFindUniqueArgs
  ): Promise<UsersInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersInfo)
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "create",
    possession: "any",
  })
  async createUsersInfo(
    @graphql.Args() args: CreateUsersInfoArgs
  ): Promise<UsersInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersInfo)
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "update",
    possession: "any",
  })
  async updateUsersInfo(
    @graphql.Args() args: UpdateUsersInfoArgs
  ): Promise<UsersInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersInfo)
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "delete",
    possession: "any",
  })
  async deleteUsersInfo(
    @graphql.Args() args: DeleteUsersInfoArgs
  ): Promise<UsersInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
