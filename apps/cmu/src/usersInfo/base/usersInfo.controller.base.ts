/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UsersInfoService } from "../usersInfo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UsersInfoCreateInput } from "./UsersInfoCreateInput";
import { UsersInfoWhereInput } from "./UsersInfoWhereInput";
import { UsersInfoWhereUniqueInput } from "./UsersInfoWhereUniqueInput";
import { UsersInfoFindManyArgs } from "./UsersInfoFindManyArgs";
import { UsersInfoUpdateInput } from "./UsersInfoUpdateInput";
import { UsersInfo } from "./UsersInfo";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UsersInfoControllerBase {
  constructor(
    protected readonly service: UsersInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsersInfo })
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: UsersInfoCreateInput): Promise<UsersInfo> {
    return await this.service.create({
      data: data,
      select: {
        additionalinfo: true,
        addressCurCity: true,
        addressCurCountry: true,
        addressCurPcode: true,
        addressCurState: true,
        addressCurStreet1: true,
        addressCurStreet2: true,
        addressCurStreet3: true,
        addressCurStreet4: true,
        addressCurTel: true,
        addressCurTelMobile: true,
        addressCurTelWork: true,
        addressPermCity: true,
        addressPermCountry: true,
        addressPermPcode: true,
        addressPermState: true,
        addressPermStreet1: true,
        addressPermStreet2: true,
        addressPermStreet3: true,
        addressPermStreet4: true,
        addressPermTel: true,
        addressPermTelMobile: true,
        addressPermTelWork: true,
        buckleyWaive: true,
        citCountry: true,
        company: true,
        curPaRes: true,
        dob: true,
        ethnicity: true,
        gender: true,
        homepage: true,
        id: true,
        nativeTongue: true,
        qqNumber: true,
        selfGender: true,
        usCitizenOrPermanentResident: true,
        userId: true,
        visastatus: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UsersInfo] })
  @ApiNestedQuery(UsersInfoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<UsersInfo[]> {
    const args = plainToClass(UsersInfoFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        additionalinfo: true,
        addressCurCity: true,
        addressCurCountry: true,
        addressCurPcode: true,
        addressCurState: true,
        addressCurStreet1: true,
        addressCurStreet2: true,
        addressCurStreet3: true,
        addressCurStreet4: true,
        addressCurTel: true,
        addressCurTelMobile: true,
        addressCurTelWork: true,
        addressPermCity: true,
        addressPermCountry: true,
        addressPermPcode: true,
        addressPermState: true,
        addressPermStreet1: true,
        addressPermStreet2: true,
        addressPermStreet3: true,
        addressPermStreet4: true,
        addressPermTel: true,
        addressPermTelMobile: true,
        addressPermTelWork: true,
        buckleyWaive: true,
        citCountry: true,
        company: true,
        curPaRes: true,
        dob: true,
        ethnicity: true,
        gender: true,
        homepage: true,
        id: true,
        nativeTongue: true,
        qqNumber: true,
        selfGender: true,
        usCitizenOrPermanentResident: true,
        userId: true,
        visastatus: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsersInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UsersInfoWhereUniqueInput
  ): Promise<UsersInfo | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        additionalinfo: true,
        addressCurCity: true,
        addressCurCountry: true,
        addressCurPcode: true,
        addressCurState: true,
        addressCurStreet1: true,
        addressCurStreet2: true,
        addressCurStreet3: true,
        addressCurStreet4: true,
        addressCurTel: true,
        addressCurTelMobile: true,
        addressCurTelWork: true,
        addressPermCity: true,
        addressPermCountry: true,
        addressPermPcode: true,
        addressPermState: true,
        addressPermStreet1: true,
        addressPermStreet2: true,
        addressPermStreet3: true,
        addressPermStreet4: true,
        addressPermTel: true,
        addressPermTelMobile: true,
        addressPermTelWork: true,
        buckleyWaive: true,
        citCountry: true,
        company: true,
        curPaRes: true,
        dob: true,
        ethnicity: true,
        gender: true,
        homepage: true,
        id: true,
        nativeTongue: true,
        qqNumber: true,
        selfGender: true,
        usCitizenOrPermanentResident: true,
        userId: true,
        visastatus: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsersInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UsersInfoWhereUniqueInput,
    @common.Body() data: UsersInfoUpdateInput
  ): Promise<UsersInfo | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          additionalinfo: true,
          addressCurCity: true,
          addressCurCountry: true,
          addressCurPcode: true,
          addressCurState: true,
          addressCurStreet1: true,
          addressCurStreet2: true,
          addressCurStreet3: true,
          addressCurStreet4: true,
          addressCurTel: true,
          addressCurTelMobile: true,
          addressCurTelWork: true,
          addressPermCity: true,
          addressPermCountry: true,
          addressPermPcode: true,
          addressPermState: true,
          addressPermStreet1: true,
          addressPermStreet2: true,
          addressPermStreet3: true,
          addressPermStreet4: true,
          addressPermTel: true,
          addressPermTelMobile: true,
          addressPermTelWork: true,
          buckleyWaive: true,
          citCountry: true,
          company: true,
          curPaRes: true,
          dob: true,
          ethnicity: true,
          gender: true,
          homepage: true,
          id: true,
          nativeTongue: true,
          qqNumber: true,
          selfGender: true,
          usCitizenOrPermanentResident: true,
          userId: true,
          visastatus: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsersInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UsersInfo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UsersInfoWhereUniqueInput
  ): Promise<UsersInfo | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          additionalinfo: true,
          addressCurCity: true,
          addressCurCountry: true,
          addressCurPcode: true,
          addressCurState: true,
          addressCurStreet1: true,
          addressCurStreet2: true,
          addressCurStreet3: true,
          addressCurStreet4: true,
          addressCurTel: true,
          addressCurTelMobile: true,
          addressCurTelWork: true,
          addressPermCity: true,
          addressPermCountry: true,
          addressPermPcode: true,
          addressPermState: true,
          addressPermStreet1: true,
          addressPermStreet2: true,
          addressPermStreet3: true,
          addressPermStreet4: true,
          addressPermTel: true,
          addressPermTelMobile: true,
          addressPermTelWork: true,
          buckleyWaive: true,
          citCountry: true,
          company: true,
          curPaRes: true,
          dob: true,
          ethnicity: true,
          gender: true,
          homepage: true,
          id: true,
          nativeTongue: true,
          qqNumber: true,
          selfGender: true,
          usCitizenOrPermanentResident: true,
          userId: true,
          visastatus: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
