/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SlateAppService } from "../slateApp.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SlateAppCreateInput } from "./SlateAppCreateInput";
import { SlateAppWhereInput } from "./SlateAppWhereInput";
import { SlateAppWhereUniqueInput } from "./SlateAppWhereUniqueInput";
import { SlateAppFindManyArgs } from "./SlateAppFindManyArgs";
import { SlateAppUpdateInput } from "./SlateAppUpdateInput";
import { SlateApp } from "./SlateApp";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SlateAppControllerBase {
  constructor(
    protected readonly service: SlateAppService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateApp })
  @nestAccessControl.UseRoles({
    resource: "SlateApp",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: SlateAppCreateInput): Promise<SlateApp> {
    return await this.service.create({
      data: data,
      select: {
        applicationStatus: true,
        appSubmittedDate: true,
        birthdate: true,
        citizenshipStatus: true,
        decisionConfirmedExportCode: true,
        email: true,
        emailAddress: true,
        first: true,
        hispanic: true,
        id: true,
        ipedsClassification: true,
        language: true,
        last: true,
        mailingAddressCity: true,
        mailingAddressCountryFipsCode: true,
        mailingAddressCountryIso2Code: true,
        mailingAddressCountryIso3Code: true,
        mailingAddressCountryName: true,
        mailingAddressCountrySisExport: true,
        mailingAddressGeomarket: true,
        mailingAddressPostalCode: true,
        mailingAddressRegion: true,
        mailingAddressStreet1: true,
        mailingAddressStreet2: true,
        mailingAddressStreet3: true,
        mailingAddressValidFromDate: true,
        mailingAddressValidToDate: true,
        middle: true,
        mobilePhoneNumber: true,
        permanentAddressCity: true,
        permanentAddressCountry: true,
        permanentAddressCountryFipsCode: true,
        permanentAddressCountryIso2Code: true,
        permanentAddressCountryIso3Code: true,
        permanentAddressCountrySisExport: true,
        permanentAddressGeomarket: true,
        permanentAddressPostalCode: true,
        permanentAddressRegion: true,
        permanentAddressStreet1: true,
        permanentAddressStreet2: true,
        permanentAddressStreet3: true,
        personalWebSite: true,
        phoneNumber: true,
        prefix: true,
        primaryCitizenship: true,
        race: true,
        reference1Waiver: true,
        reference2Waiver: true,
        reference3Waiver: true,
        roundExportCode: true,
        secondaryCitizenship: true,
        sex: true,
        suffix: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateApp] })
  @ApiNestedQuery(SlateAppFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SlateApp",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<SlateApp[]> {
    const args = plainToClass(SlateAppFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        applicationStatus: true,
        appSubmittedDate: true,
        birthdate: true,
        citizenshipStatus: true,
        decisionConfirmedExportCode: true,
        email: true,
        emailAddress: true,
        first: true,
        hispanic: true,
        id: true,
        ipedsClassification: true,
        language: true,
        last: true,
        mailingAddressCity: true,
        mailingAddressCountryFipsCode: true,
        mailingAddressCountryIso2Code: true,
        mailingAddressCountryIso3Code: true,
        mailingAddressCountryName: true,
        mailingAddressCountrySisExport: true,
        mailingAddressGeomarket: true,
        mailingAddressPostalCode: true,
        mailingAddressRegion: true,
        mailingAddressStreet1: true,
        mailingAddressStreet2: true,
        mailingAddressStreet3: true,
        mailingAddressValidFromDate: true,
        mailingAddressValidToDate: true,
        middle: true,
        mobilePhoneNumber: true,
        permanentAddressCity: true,
        permanentAddressCountry: true,
        permanentAddressCountryFipsCode: true,
        permanentAddressCountryIso2Code: true,
        permanentAddressCountryIso3Code: true,
        permanentAddressCountrySisExport: true,
        permanentAddressGeomarket: true,
        permanentAddressPostalCode: true,
        permanentAddressRegion: true,
        permanentAddressStreet1: true,
        permanentAddressStreet2: true,
        permanentAddressStreet3: true,
        personalWebSite: true,
        phoneNumber: true,
        prefix: true,
        primaryCitizenship: true,
        race: true,
        reference1Waiver: true,
        reference2Waiver: true,
        reference3Waiver: true,
        roundExportCode: true,
        secondaryCitizenship: true,
        sex: true,
        suffix: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SlateApp",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: SlateAppWhereUniqueInput
  ): Promise<SlateApp | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        applicationStatus: true,
        appSubmittedDate: true,
        birthdate: true,
        citizenshipStatus: true,
        decisionConfirmedExportCode: true,
        email: true,
        emailAddress: true,
        first: true,
        hispanic: true,
        id: true,
        ipedsClassification: true,
        language: true,
        last: true,
        mailingAddressCity: true,
        mailingAddressCountryFipsCode: true,
        mailingAddressCountryIso2Code: true,
        mailingAddressCountryIso3Code: true,
        mailingAddressCountryName: true,
        mailingAddressCountrySisExport: true,
        mailingAddressGeomarket: true,
        mailingAddressPostalCode: true,
        mailingAddressRegion: true,
        mailingAddressStreet1: true,
        mailingAddressStreet2: true,
        mailingAddressStreet3: true,
        mailingAddressValidFromDate: true,
        mailingAddressValidToDate: true,
        middle: true,
        mobilePhoneNumber: true,
        permanentAddressCity: true,
        permanentAddressCountry: true,
        permanentAddressCountryFipsCode: true,
        permanentAddressCountryIso2Code: true,
        permanentAddressCountryIso3Code: true,
        permanentAddressCountrySisExport: true,
        permanentAddressGeomarket: true,
        permanentAddressPostalCode: true,
        permanentAddressRegion: true,
        permanentAddressStreet1: true,
        permanentAddressStreet2: true,
        permanentAddressStreet3: true,
        personalWebSite: true,
        phoneNumber: true,
        prefix: true,
        primaryCitizenship: true,
        race: true,
        reference1Waiver: true,
        reference2Waiver: true,
        reference3Waiver: true,
        roundExportCode: true,
        secondaryCitizenship: true,
        sex: true,
        suffix: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SlateApp",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: SlateAppWhereUniqueInput,
    @common.Body() data: SlateAppUpdateInput
  ): Promise<SlateApp | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          applicationStatus: true,
          appSubmittedDate: true,
          birthdate: true,
          citizenshipStatus: true,
          decisionConfirmedExportCode: true,
          email: true,
          emailAddress: true,
          first: true,
          hispanic: true,
          id: true,
          ipedsClassification: true,
          language: true,
          last: true,
          mailingAddressCity: true,
          mailingAddressCountryFipsCode: true,
          mailingAddressCountryIso2Code: true,
          mailingAddressCountryIso3Code: true,
          mailingAddressCountryName: true,
          mailingAddressCountrySisExport: true,
          mailingAddressGeomarket: true,
          mailingAddressPostalCode: true,
          mailingAddressRegion: true,
          mailingAddressStreet1: true,
          mailingAddressStreet2: true,
          mailingAddressStreet3: true,
          mailingAddressValidFromDate: true,
          mailingAddressValidToDate: true,
          middle: true,
          mobilePhoneNumber: true,
          permanentAddressCity: true,
          permanentAddressCountry: true,
          permanentAddressCountryFipsCode: true,
          permanentAddressCountryIso2Code: true,
          permanentAddressCountryIso3Code: true,
          permanentAddressCountrySisExport: true,
          permanentAddressGeomarket: true,
          permanentAddressPostalCode: true,
          permanentAddressRegion: true,
          permanentAddressStreet1: true,
          permanentAddressStreet2: true,
          permanentAddressStreet3: true,
          personalWebSite: true,
          phoneNumber: true,
          prefix: true,
          primaryCitizenship: true,
          race: true,
          reference1Waiver: true,
          reference2Waiver: true,
          reference3Waiver: true,
          roundExportCode: true,
          secondaryCitizenship: true,
          sex: true,
          suffix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SlateApp",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: SlateAppWhereUniqueInput
  ): Promise<SlateApp | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          applicationStatus: true,
          appSubmittedDate: true,
          birthdate: true,
          citizenshipStatus: true,
          decisionConfirmedExportCode: true,
          email: true,
          emailAddress: true,
          first: true,
          hispanic: true,
          id: true,
          ipedsClassification: true,
          language: true,
          last: true,
          mailingAddressCity: true,
          mailingAddressCountryFipsCode: true,
          mailingAddressCountryIso2Code: true,
          mailingAddressCountryIso3Code: true,
          mailingAddressCountryName: true,
          mailingAddressCountrySisExport: true,
          mailingAddressGeomarket: true,
          mailingAddressPostalCode: true,
          mailingAddressRegion: true,
          mailingAddressStreet1: true,
          mailingAddressStreet2: true,
          mailingAddressStreet3: true,
          mailingAddressValidFromDate: true,
          mailingAddressValidToDate: true,
          middle: true,
          mobilePhoneNumber: true,
          permanentAddressCity: true,
          permanentAddressCountry: true,
          permanentAddressCountryFipsCode: true,
          permanentAddressCountryIso2Code: true,
          permanentAddressCountryIso3Code: true,
          permanentAddressCountrySisExport: true,
          permanentAddressGeomarket: true,
          permanentAddressPostalCode: true,
          permanentAddressRegion: true,
          permanentAddressStreet1: true,
          permanentAddressStreet2: true,
          permanentAddressStreet3: true,
          personalWebSite: true,
          phoneNumber: true,
          prefix: true,
          primaryCitizenship: true,
          race: true,
          reference1Waiver: true,
          reference2Waiver: true,
          reference3Waiver: true,
          roundExportCode: true,
          secondaryCitizenship: true,
          sex: true,
          suffix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
